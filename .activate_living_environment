#!/usr/bin/env bash
# Enhanced Living Environment Activator - Maximum Security & Container Integration
# Activates hardened living code environment with TOYBOX, CHISEL, proot-distro support

# Colors for better output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

echo -e "${PURPLE}üõ°Ô∏è Enhanced Living Environment Activator${NC}"
echo -e "${BLUE}===============================================${NC}"

# Source the enhanced living environment wrapper
if [[ -f "$(pwd)/.living_environment_wrapper.sh" ]]; then
    source "$(pwd)/.living_environment_wrapper.sh"
    echo -e "${GREEN}‚úÖ Enhanced living environment loaded${NC}"
else
    echo -e "${RED}‚ùå Living environment wrapper not found${NC}"
    exit 1
fi

# Display environment status
echo -e "${CYAN}üìä Environment Status:${NC}"
echo -e "   Type: ${ENVIRONMENT_TYPE:-unknown}"
echo -e "   Container Required: ${CONTAINER_REQUIRED:-0}"
echo -e "   Security Level: ${LIVING_CODE_SECURITY_LEVEL:-standard}"
echo -e "   Hardened Mode: ${LIVING_CODE_HARDENED:-0}"

# Container integration status
echo -e "${CYAN}üì¶ Container Integration:${NC}"
echo -e "   TOYBOX: ${TOYBOX_LIVING_CODE:-‚ùå}"
echo -e "   CHISEL: ${CHISEL_LIVING_CODE:-‚ùå}"
echo -e "   Android Container: ${ANDROID_CONTAINER_LIVING_CODE:-‚ùå}"
echo -e "   Orchestration: ${CONTAINER_ORCHESTRATION_LOADED:-‚ùå}"

# Security status
echo -e "${CYAN}üîí Security Features:${NC}"
echo -e "   Hardened Shell: ${HARDENED_SHELL_LOADED:-‚ùå}"
echo -e "   Hardened Permissions: ${HARDENED_PERMISSIONS_APPLIED:-‚ùå}"
echo -e "   PGP Integration: ${PGP_SECURITY_ENABLED:-‚ùå}"

echo -e "${BLUE}===============================================${NC}"

# Enhanced command aliases with container support
alias living_status='living_code_status'
alias security_report='security_status'
alias harden_security='apply_security_hardening'
alias container_status='container_status_report 2>/dev/null || echo "Container orchestration not loaded"'

# Storage feature aliases (enhanced)
alias storage_enable='storage_features_enable'
alias zram_check='zram_status'
alias memmap_check='memmap_status'
alias storage_report='storage_optimization_report'

# Container execution aliases
alias safe_exec='living_container_exec'
alias android_exec='android_safe_exec 2>/dev/null || echo "Android execution manager not available"'
alias toybox_exec='toybox_exec 2>/dev/null || echo "TOYBOX not available"'

# Security management aliases
alias apply_permissions='python3 scripts/hardened-permissions-manager.py --apply'
alias verify_permissions='python3 scripts/hardened-permissions-manager.py --verify'
alias security_report_gen='python3 scripts/hardened-permissions-manager.py --report'
alias pgp_setup='python3 scripts/hardened-permissions-manager.py --pgp'

# Enhanced hardened shell aliases
alias monitor_resources='monitor_resources 2>/dev/null || echo "Resource monitoring not available"'
alias optimize_memory='optimize_memory_usage 2>/dev/null || echo "Memory optimization not available"'
alias cleanup_system='cleanup_and_restart 2>/dev/null || echo "System cleanup not available"'

# Container management aliases
alias create_container='chisel_create_container 2>/dev/null || echo "CHISEL not available"'
alias run_container='chisel_run_container 2>/dev/null || echo "CHISEL not available"'
alias list_containers='chisel_list_containers 2>/dev/null || echo "CHISEL not available"'

# proot-distro aliases (Android compatibility)
alias proot_setup='create_proot_environment 2>/dev/null || echo "proot-distro not available"'
alias proot_run='proot_exec 2>/dev/null || echo "proot-distro not available"'
alias proot_living='integrate_living_code_proot 2>/dev/null || echo "proot integration not available"'

echo -e "${GREEN}üß¨ Enhanced Living Code Environment Ready!${NC}"
echo ""
echo -e "${YELLOW}üìã Available Commands:${NC}"
echo -e "${CYAN}  Core Living Code:${NC}"
echo "    living_status          - Show living code status"
echo "    security_report        - Show security status"
echo "    harden_security        - Apply security hardening"
echo "    container_status       - Show container status"
echo ""
echo -e "${CYAN}  Storage Features:${NC}"
echo "    storage_enable         - Enable ZRAM & NumPy memmap"
echo "    zram_check            - Check ZRAM status"
echo "    memmap_check          - Check NumPy memmap status"
echo "    storage_report        - Complete storage optimization report"
echo ""
echo -e "${CYAN}  Container Execution:${NC}"
echo "    safe_exec <cmd>       - Execute command with optimal container"
echo "    android_exec <script> - Execute script in Android container"
echo "    toybox_exec <cmd>     - Execute with TOYBOX"
echo ""
echo -e "${CYAN}  Security Management:${NC}"
echo "    apply_permissions     - Apply hardened permissions"
echo "    verify_permissions    - Verify current permissions"
echo "    security_report_gen   - Generate security report"
echo "    pgp_setup            - Setup PGP integration"
echo ""
echo -e "${CYAN}  System Optimization:${NC}"
echo "    monitor_resources     - Monitor system resources"
echo "    optimize_memory       - Optimize memory usage"
echo "    cleanup_system        - Clean up and restart services"
echo ""
echo -e "${CYAN}  Container Management:${NC}"
echo "    create_container <name> <image> <cmd> - Create CHISEL container"
echo "    run_container <name>  - Run CHISEL container"
echo "    list_containers       - List all containers"
echo ""
echo -e "${CYAN}  Android/proot-distro:${NC}"
echo "    proot_setup <distro>  - Setup proot environment"
echo "    proot_run <cmd>       - Execute in proot environment"
echo "    proot_living          - Integrate living code with proot"
echo ""

# Show current environment capabilities
echo -e "${PURPLE}üéØ Current Environment Capabilities:${NC}"
if [[ "$ENVIRONMENT_TYPE" == "android" ]]; then
    echo -e "   üì± Android Environment Detected"
    echo -e "   üîí Container execution required for Android ${ANDROID_VERSION:-unknown}+"
    echo -e "   üì¶ proot-distro recommended for script execution"
elif [[ "$ENVIRONMENT_TYPE" == "chroot" ]]; then
    echo -e "   üè† Chroot Environment Detected"
    echo -e "   üîí Enhanced security available"
elif [[ "$ENVIRONMENT_TYPE" == "busybox" ]]; then
    echo -e "   üì¶ BusyBox Environment Detected"
    echo -e "   üîß TOYBOX augmentation available"
else
    echo -e "   üêß Standard Linux Environment"
    echo -e "   üîí Full hardening capabilities available"
fi

if [[ "$HARDENED_SHELL_LOADED" == "1" ]]; then
    echo -e "   ‚úÖ Hardened shell environment active"
fi

if [[ "${CONTAINER_ORCHESTRATION_LOADED:-0}" == "1" ]]; then
    echo -e "   ‚úÖ Container orchestration ready"
fi

echo ""
echo -e "${GREEN}üöÄ Environment activated successfully!${NC}"
echo -e "${BLUE}===============================================${NC}"

# SSnaHke-Local Integration
export SSNAHKE_LOCAL_ENABLED=1
export SSNAHKE_SCANNER_PATH="$HOME/ssnahke_local.py"
export SSNAHKE_LAUNCHER_PATH="$HOME/ssnahke_launcher.sh"

# SSnaHke-Local commands
ssnahke_scan() {
    echo "üêç Running SSnaHke-Local security scan..."
    if [[ -x "$SSNAHKE_LAUNCHER_PATH" ]]; then
        "$SSNAHKE_LAUNCHER_PATH" "$@"
    elif [[ -f scripts/ssnahke-local-installer.sh ]]; then
        echo "üîß SSnaHke-Local not installed. Installing now..."
        ./scripts/ssnahke-local-installer.sh
    else
        echo "‚ùå SSnaHke-Local installer not found"
    fi
}

ssnahke_install() {
    echo "üîß Installing SSnaHke-Local security scanner..."
    if [[ -f scripts/ssnahke-local-installer.sh ]]; then
        ./scripts/ssnahke-local-installer.sh
    else
        echo "‚ùå SSnaHke-Local installer not found at scripts/ssnahke-local-installer.sh"
    fi
}

ssnahke_demo() {
    echo "üéØ Demonstrating SSnaHke-Local system..."
    if [[ -f scripts/demonstrate-ssnahke-local.sh ]]; then
        ./scripts/demonstrate-ssnahke-local.sh
    else
        echo "‚ùå SSnaHke-Local demonstration not found"
    fi
}

ssnahke_status() {
    echo "üêç SSnaHke-Local Status:"
    echo "   Scanner: $([[ -f "$SSNAHKE_SCANNER_PATH" ]] && echo "‚úÖ Installed" || echo "‚ùå Missing")"
    echo "   Launcher: $([[ -f "$SSNAHKE_LAUNCHER_PATH" ]] && echo "‚úÖ Available" || echo "‚ùå Missing")"
    echo "   Living Code Integration: $([[ "$LIVING_CODE_ENABLED" == "1" ]] && echo "‚úÖ Active" || echo "‚ùå Inactive")"
    echo "   Installer: $([[ -f scripts/ssnahke-local-installer.sh ]] && echo "‚úÖ Available" || echo "‚ùå Missing")"
    echo "   Demo: $([[ -f scripts/demonstrate-ssnahke-local.sh ]] && echo "‚úÖ Available" || echo "‚ùå Missing")"
}

# Aliases for SSnaHke-Local
alias ssnahke='ssnahke_scan'
alias snake='ssnahke_scan'
alias security_scan='ssnahke_scan'
alias install_ssnahke='ssnahke_install'
