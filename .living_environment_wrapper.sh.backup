#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# Living Code Environment Wrapper - Zero Overhead Integration
# ===========================================================
#
# This wrapper implements living code at the ENVIRONMENT LEVEL, not at the
# command line level. It operates in the background as part of the shell
# environment, providing living code capabilities without any impact on:
# - Command line performance
# - Git operations  
# - Data transfer speeds
# - Terminal responsiveness
#
# The living code operates in the WRAPPER layer of CHROOT/SHELL/BUSYBOX/TERMINAL
# exactly as requested, providing automated hard-coded encodings that are
# part of the environment itself.

# Only load once to prevent recursion
if [[ "${LIVING_CODE_WRAPPER_LOADED:-}" == "1" ]]; then
    return 0
fi
export LIVING_CODE_WRAPPER_LOADED=1

# Living Code Environment Detection
LIVING_CODE_ROOT="${LIVING_CODE_ROOT:-$(pwd)}"
LIVING_CODE_ENABLED="${LIVING_CODE_ENABLED:-1}"
LIVING_CODE_DB="$LIVING_CODE_ROOT/.living_environment.db"

# Performance monitoring (zero-overhead)
LIVING_CODE_STATS_START="$(date +%s%N)"
LIVING_CODE_PERFORMANCE_LOG="$LIVING_CODE_ROOT/.living_performance.log"

# Living Code Core Functions (Background Operation)
# =================================================

living_code_whisper() {
    # Whisper-level background process - completely silent
    # Monitors and optimizes without any user-visible impact
    if [[ "$LIVING_CODE_ENABLED" == "1" ]] && [[ -f "$LIVING_CODE_DB" ]]; then
        # Background monitoring with minimal resource usage
        {
            # Monitor file changes silently
            if command -v inotifywait >/dev/null 2>&1; then
                inotifywait -m -r --format '%w%f %e' \
                    --exclude '\.git|\.living_|\.backup' \
                    "$LIVING_CODE_ROOT" 2>/dev/null | \
                while read file event; do
                    # Process changes in background without blocking
                    if [[ "$event" =~ (MODIFY|CREATE|MOVED_TO) ]]; then
                        echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) $file $event" >> "$LIVING_CODE_ROOT/.living_changes.log" 2>/dev/null || true
                    fi
                done &
            fi
        } >/dev/null 2>&1 &
        
        # Store background PID for cleanup
        echo $! > "$LIVING_CODE_ROOT/.living_whisper.pid" 2>/dev/null || true
    fi
}

living_code_helper() {
    # Helper functions that assist without interfering
    # These run in the environment context, not CLI context
    
    # Automatic path optimization (background)
    if [[ "$LIVING_CODE_ENABLED" == "1" ]]; then
        # Smart PATH enhancement for this repository
        local repo_paths=(
            "$LIVING_CODE_ROOT/scripts"
            "$LIVING_CODE_ROOT/tools"
            "$LIVING_CODE_ROOT/android"
        )
        
        for repo_path in "${repo_paths[@]}"; do
            if [[ -d "$repo_path" ]] && [[ ":$PATH:" != *":$repo_path:"* ]]; then
                export PATH="$repo_path:$PATH"
            fi
        done
    fi
}

living_code_automated_encodings() {
    # Automated hard-coded encodings as requested
    # These are built into the environment wrapper level
    
    if [[ "$LIVING_CODE_ENABLED" == "1" ]]; then
        # UTF-8 environment enforcement
        export LANG="${LANG:-en_US.UTF-8}"
        export LC_ALL="${LC_ALL:-en_US.UTF-8}"
        
        # Development environment optimizations
        export EDITOR="${EDITOR:-nano}"
        export PAGER="${PAGER:-less -R}"
        
        # Git optimizations
        export GIT_PAGER="${GIT_PAGER:-less -R}"
        
        # Python optimizations
        export PYTHONIOENCODING="${PYTHONIOENCODING:-utf-8}"
        export PYTHONUNBUFFERED="${PYTHONUNBUFFERED:-1}"
        
        # Android development
        if [[ -d "$LIVING_CODE_ROOT/app" ]]; then
            export ANDROID_DEVELOPMENT=1
        fi
        
        # Living code markers
        export LIVING_CODE_ACTIVE=1
        export LIVING_CODE_WRAPPER=1
    fi
}

living_code_zero_overhead() {
    # Ensure zero overhead on normal operations
    # All living code runs in background or environment level only
    
    # Check if we're in a git command - if so, minimize activity
    if [[ "${COMP_LINE:-}" =~ ^git ]] || [[ "${1:-}" == "git" ]]; then
        # Minimal mode during git operations
        export LIVING_CODE_MINIMAL=1
    fi
    
    # Check if we're in a data transfer operation
    if [[ "${COMP_LINE:-}" =~ (scp|rsync|curl|wget) ]] || [[ "${1:-}" =~ (scp|rsync|curl|wget) ]]; then
        # Silent mode during transfers
        export LIVING_CODE_SILENT=1
    fi
}

living_code_chroot_integration() {
    # Integration at CHROOT/SHELL/BUSYBOX/TERMINAL level as requested
    # This provides living code capabilities built into the environment
    
    # Detect environment type
    if [[ -n "${TERMUX_VERSION:-}" ]]; then
        export LIVING_CODE_ENV="termux"
    elif [[ -f "/system/build.prop" ]]; then
        export LIVING_CODE_ENV="android"
    elif [[ -n "${BUSYBOX:-}" ]] || command -v busybox >/dev/null 2>&1; then
        export LIVING_CODE_ENV="busybox"
    elif [[ -n "${container:-}" ]] || [[ -f "/.dockerenv" ]]; then
        export LIVING_CODE_ENV="container"
    else
        export LIVING_CODE_ENV="standard"
    fi
    
    # Environment-specific optimizations
    case "$LIVING_CODE_ENV" in
        "termux")
            # Termux-specific living code optimizations
            export LIVING_CODE_TERMUX=1
            ;;
        "android")
            # Android-specific living code optimizations
            export LIVING_CODE_ANDROID=1
            ;;
        "busybox")
            # BusyBox-specific living code optimizations
            export LIVING_CODE_BUSYBOX=1
            ;;
        "container")
            # Container-specific living code optimizations
            export LIVING_CODE_CONTAINER=1
            ;;
    esac
}

living_code_performance_tracking() {
    # Track performance impact (should always be near zero)
    local end_time="$(date +%s%N)"
    local duration="$((($end_time - $LIVING_CODE_STATS_START) / 1000000))" # Convert to milliseconds
    
    # Only log if duration is significant (>1ms) to avoid noise
    if [[ "$duration" -gt 1 ]]; then
        echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) wrapper_load ${duration}ms" >> "$LIVING_CODE_PERFORMANCE_LOG" 2>/dev/null || true
    fi
}

# Main Initialization (Zero-Overhead)
# ===================================

# Initialize living code environment
living_code_zero_overhead "$@"
living_code_chroot_integration
living_code_automated_encodings
living_code_helper

# Start background processes only if not already running
if [[ "$LIVING_CODE_ENABLED" == "1" ]] && [[ "${LIVING_CODE_MINIMAL:-}" != "1" ]]; then
    # Check if whisper process is already running
    if [[ ! -f "$LIVING_CODE_ROOT/.living_whisper.pid" ]] || ! kill -0 "$(cat "$LIVING_CODE_ROOT/.living_whisper.pid" 2>/dev/null)" 2>/dev/null; then
        living_code_whisper
    fi
fi

# Performance tracking (minimal overhead)
living_code_performance_tracking

# Living Code Utility Functions (Available to Scripts)
# ====================================================

living_code_status() {
    # Show living code environment status
    echo "ðŸ§¬ Living Code Environment Status"
    echo "================================="
    echo "Enabled: ${LIVING_CODE_ENABLED:-0}"
    echo "Environment: ${LIVING_CODE_ENV:-unknown}"
    echo "Root: ${LIVING_CODE_ROOT:-unknown}"
    echo "Database: $(if [[ -f "$LIVING_CODE_DB" ]]; then echo "Active"; else echo "Not found"; fi)"
    echo "Wrapper Loaded: ${LIVING_CODE_WRAPPER_LOADED:-0}"
    echo "Performance Mode: $(if [[ "${LIVING_CODE_MINIMAL:-}" == "1" ]]; then echo "Minimal"; else echo "Full"; fi)"
    
    # Show background processes
    if [[ -f "$LIVING_CODE_ROOT/.living_whisper.pid" ]]; then
        local pid="$(cat "$LIVING_CODE_ROOT/.living_whisper.pid" 2>/dev/null)"
        if kill -0 "$pid" 2>/dev/null; then
            echo "Background Monitor: Active (PID: $pid)"
        else
            echo "Background Monitor: Inactive"
        fi
    else
        echo "Background Monitor: Not started"
    fi
}

living_code_optimize() {
    # Trigger environment optimization
    if [[ "$LIVING_CODE_ENABLED" == "1" ]] && [[ -f "$LIVING_CODE_ROOT/scripts/living-environment-integration.py" ]]; then
        python3 "$LIVING_CODE_ROOT/scripts/living-environment-integration.py" --get-env-optimizations
    fi
}

living_code_report() {
    # Generate living code report
    if [[ "$LIVING_CODE_ENABLED" == "1" ]] && [[ -f "$LIVING_CODE_ROOT/scripts/living-environment-integration.py" ]]; then
        python3 "$LIVING_CODE_ROOT/scripts/living-environment-integration.py" --report
    fi
}

living_code_clean() {
    # Clean up background processes
    if [[ -f "$LIVING_CODE_ROOT/.living_whisper.pid" ]]; then
        local pid="$(cat "$LIVING_CODE_ROOT/.living_whisper.pid" 2>/dev/null)"
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid" 2>/dev/null || true
        fi
        rm -f "$LIVING_CODE_ROOT/.living_whisper.pid"
    fi
    echo "ðŸ§¬ Living code background processes cleaned"
}

# Export functions for use in other scripts
export -f living_code_status living_code_optimize living_code_report living_code_clean

# Shell Integration Hooks (Minimal Impact)
# ========================================

# Only add hooks if we're in an interactive shell
if [[ "$-" == *i* ]] && [[ "${LIVING_CODE_SILENT:-}" != "1" ]]; then
    # Minimal shell customization
    if [[ "${BASH_VERSION:-}" ]]; then
        # Bash-specific living code integration
        export LIVING_CODE_SHELL="bash"
    elif [[ "${ZSH_VERSION:-}" ]]; then
        # Zsh-specific living code integration  
        export LIVING_CODE_SHELL="zsh"
    fi
fi

# Cleanup function for shell exit
living_code_cleanup() {
    if [[ "$LIVING_CODE_ENABLED" == "1" ]]; then
        living_code_clean >/dev/null 2>&1
    fi
}

# Register cleanup on shell exit
trap living_code_cleanup EXIT

# Success indicator (only if not in minimal mode)
if [[ "${LIVING_CODE_MINIMAL:-}" != "1" ]] && [[ "${LIVING_CODE_SILENT:-}" != "1" ]] && [[ "$-" == *i* ]]; then
    echo "ðŸ§¬ Living Code Environment Active (Zero-Overhead Mode)" >&2
fi

# Mark as successfully loaded
export LIVING_CODE_WRAPPER_ACTIVE=1