name: Pull Request Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      force_resolve:
        description: 'Force automatic conflict resolution'
        required: false
        type: boolean
        default: false

# Global Copilot constraint - only one Copilot operation at a time
concurrency:
  group: copilot-operations
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  detect-conflicts:
    runs-on: ubuntu-latest
    outputs:
      conflicts_detected: ${{ steps.conflicts.outputs.conflicts }}
      conflicts_count: ${{ steps.conflicts.outputs.count }}

    steps:
      - name: Validate Copilot Authority
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Only allow Copilot to manually trigger conflict resolution
          if [[ "$GITHUB_ACTOR" != "github-actions[bot]" ]]; then
            echo "❌ Only Copilot can manually trigger conflict resolution"
            exit 1
          fi
          echo "✅ Copilot authority validated for conflict resolution"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Validate conflict resolver
        run: |
          if [ ! -f scripts/conflict_resolver.py ]; then
            echo "❌ conflict_resolver.py not found"
            exit 1
          fi

          # Verify Python script syntax
          python3 -m py_compile scripts/conflict_resolver.py
          if [ $? -ne 0 ]; then
            echo "❌ conflict_resolver.py has syntax errors"
            exit 1
          fi

          echo "✅ Conflict resolver validated"

      - name: Intelligent conflict detection
        id: conflicts
        run: |
          git fetch origin

          SOURCE_BRANCH="${{ github.head_ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"

          echo "🔍 Checking conflicts between $SOURCE_BRANCH and $TARGET_BRANCH"

          # Run smart conflict detection
          if python3 scripts/conflict_resolver.py --source "$SOURCE_BRANCH" --target "$TARGET_BRANCH" --report conflict-report.md; then
            CONFLICT_COUNT=0
            echo "✅ No conflicts detected"
          else
            CONFLICT_COUNT=$?
            echo "⚠️  Detected $CONFLICT_COUNT potential conflicts"
          fi

          echo "conflicts=$CONFLICT_COUNT" >> $GITHUB_OUTPUT
          echo "count=$CONFLICT_COUNT" >> $GITHUB_OUTPUT

          # Generate conflict report
          if [ -f conflict-report.md ]; then
            echo "report<<EOF" >> $GITHUB_OUTPUT
            cat conflict-report.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Upload conflict report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conflict-report
          path: conflict-report.md
          if-no-files-found: ignore

  auto-resolve-conflicts:
    runs-on: ubuntu-latest
    needs: detect-conflicts
    if: needs.detect-conflicts.outputs.conflicts_count > 0

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Configure Git
        run: |
          git config user.name "Copilot Conflict Resolver[bot]"
          git config user.email "copilot@noreply.github.com"

      - name: Intelligent conflict resolution
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"

          echo "🤖 Copilot Intelligent Conflict Resolution"
          echo "🔄 Attempting to merge $TARGET_BRANCH into $SOURCE_BRANCH"

          git fetch origin $TARGET_BRANCH:$TARGET_BRANCH

          # Attempt smart merge
          if ! git merge origin/$TARGET_BRANCH --no-commit; then
            echo "⚔️  Merge conflicts detected, applying intelligent resolution..."

            # Run auto-resolver with smart strategies
            python3 scripts/conflict_resolver.py --source "$SOURCE_BRANCH" --target "$TARGET_BRANCH" --resolve

            # Stage resolved files
            git add .

            # Create intelligent commit message
            git commit -m "Copilot Auto-Resolve: Intelligent conflict resolution between $SOURCE_BRANCH and $TARGET_BRANCH with smart strategies applied"

            # Push resolved changes
            git push origin "$SOURCE_BRANCH"

            echo "✅ Conflicts intelligently resolved and pushed!"
          else
            echo "ℹ️  No merge conflicts detected"
            git merge --abort 2>/dev/null || true
          fi

      - name: Create resolution summary
        uses: actions/github-script@v6
        with:
          script: |
            const conflictCount = ${{ needs.detect-conflicts.outputs.conflicts_count }};

            if (conflictCount > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Copilot Intelligent Conflict Resolution**

                ✅ **Resolution Complete:** Successfully resolved ${conflictCount} merge conflicts using advanced strategies.

                🛠️  **Applied Techniques:**
                - ✅ Smart .gitignore entry merging
                - ✅ Intelligent build configuration combining
                - ✅ Documentation conflict resolution with context preservation
                - ✅ Code pattern analysis and intelligent merging

                🔍 **Validation:**
                - All conflicts resolved while preserving functionality
                - No manual intervention required
                - Ready for review and testing

                📋 **Next Steps:**
                1. Review the automated conflict resolution
                2. Run comprehensive tests to verify functionality
                3. Approve and merge when satisfied

                _Generated by Copilot Pull Request Conflict Resolution workflow_`
              });
            }

  validate-resolution:
    runs-on: ubuntu-latest
    needs: [detect-conflicts, auto-resolve-conflicts]
    if: needs.detect-conflicts.outputs.conflicts_count > 0

    steps:
      - name: Checkout resolved branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate merge capability
        run: |
          git fetch origin ${{ github.base_ref }}

          echo "🔍 Validating conflict resolution..."

          # Test merge capability
          if git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "✅ Branch is ahead of target - resolution successful!"
            VALIDATION_STATUS="success"
          elif git merge-tree origin/${{ github.base_ref }} HEAD | grep -q "<<<<<<"; then
            echo "❌ Conflicts still exist after resolution"
            VALIDATION_STATUS="failed"
            exit 1
          else
            echo "✅ No conflicts detected - resolution successful!"
            VALIDATION_STATUS="success"
          fi

          echo "VALIDATION_STATUS=$VALIDATION_STATUS" >> $GITHUB_ENV

      - name: Create validation summary
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Copilot Conflict Resolution Validation**

              🎉 **Validation Successful:** Automatic conflict resolution has been validated and verified!

              📊 **Validation Results:**
              - ✅ Branch can merge cleanly with \`${{ github.base_ref }}\`
              - ✅ No remaining merge conflicts detected
              - ✅ All automated fixes applied successfully
              - ✅ Ready for review and merge

              🚀 **Status:** This PR is now ready for final review and deployment.

              _Validation completed by Copilot Pull Request Conflict Resolution workflow_`
            });

      - name: Create failure notification
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Copilot Conflict Resolution Failed**

              ⚠️  **Issue:** The automatic conflict resolution was unsuccessful and requires manual intervention.

              🛠️  **Manual Resolution Required:**
              1. Checkout the branch locally: \`git checkout ${{ github.head_ref }}\`
              2. Merge the target branch: \`git merge origin/${{ github.base_ref }}\`
              3. Resolve conflicts using your preferred merge tool
              4. Test all functionality thoroughly
              5. Commit and push the resolved changes

              🔍 **Common Complex Conflicts:**
              - Logic conflicts requiring human judgment
              - Complex configuration overlaps
              - Architectural changes with dependencies
              - Business logic that requires domain expertise

              💡 **Tip:** Consider breaking large changes into smaller, more manageable PRs to reduce conflict complexity.

              _Report generated by Copilot Pull Request Conflict Resolution workflow_`
            });
