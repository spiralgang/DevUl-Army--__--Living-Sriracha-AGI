name: Pull Request Conflict Resolution

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      force_resolve:
        description: 'Force automatic conflict resolution'
        required: false
        type: boolean
        default: false

jobs:
  detect-conflicts:
    runs-on: ubuntu-latest
    outputs:
      conflicts_detected: ${{ steps.conflicts.outputs.conflicts }}
      conflicts_count: ${{ steps.conflicts.outputs.count }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Prepare conflict resolver
        run: |
          # Ensure Python script is available and has correct dependencies
          if [ ! -f scripts/conflict-resolver.py ]; then
            echo "Error: conflict-resolver.py not found"
            exit 1
          fi
      
      - name: Detect merge conflicts
        id: conflicts
        run: |
          # Fetch all branches
          git fetch origin
          
          # Get the PR source branch
          SOURCE_BRANCH="${{ github.head_ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"
          
          echo "Checking conflicts between $SOURCE_BRANCH and $TARGET_BRANCH"
          
          # Run conflict detection
          python3 scripts/conflict-resolver.py --source "$SOURCE_BRANCH" --target "$TARGET_BRANCH" --report conflict-report.md
          CONFLICT_COUNT=$?
          if [ $CONFLICT_COUNT -eq 0 ]; then
            echo "conflicts=$CONFLICT_COUNT" >> $GITHUB_OUTPUT
            echo "count=$CONFLICT_COUNT" >> $GITHUB_OUTPUT
            
            # Read report content
            if [ -f conflict-report.md ]; then
              echo "report<<EOF" >> $GITHUB_OUTPUT
              cat conflict-report.md >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          else
            echo "conflicts=unknown" >> $GITHUB_OUTPUT
            echo "count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload conflict report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: conflict-report
          path: conflict-report.md
          if-no-files-found: ignore

  auto-resolve-conflicts:
    runs-on: ubuntu-latest
    needs: detect-conflicts
    if: needs.detect-conflicts.outputs.conflicts_count > 0
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Configure Git
        run: |
          git config user.name "Copilot Conflict Resolver"
          git config user.email "copilot@github.com"
      
      - name: Fetch target branch
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
      
      - name: Attempt merge and resolve conflicts
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          TARGET_BRANCH="${{ github.base_ref }}"
          
          echo "Attempting to merge $TARGET_BRANCH into $SOURCE_BRANCH"
          
          # Try merge
          if ! git merge origin/$TARGET_BRANCH --no-commit; then
            echo "Merge conflicts detected, attempting auto-resolution..."
            
            # Run auto-resolver
            python3 scripts/conflict-resolver.py --source "$SOURCE_BRANCH" --target "$TARGET_BRANCH" --resolve
            
            # Stage resolved files
            git add .
            
            # Commit merge
            git commit -m "🤖 Auto-resolve merge conflicts

            Conflicts resolved automatically using conflict-resolver.py
            
            Changes:
            - Merged .gitignore entries
            - Combined build configuration files
            - Resolved documentation conflicts
            
            Generated by: Pull Request Conflict Resolution workflow"
            
            # Push changes
            git push origin "$SOURCE_BRANCH"
            
            echo "✅ Conflicts resolved and pushed!"
          else
            echo "ℹ️  No conflicts detected during merge"
            git merge --abort 2>/dev/null || true
          fi
      
      - name: Create conflict resolution comment
        uses: actions/github-script@v6
        with:
          script: |
            const conflictCount = ${{ needs.detect-conflicts.outputs.conflicts_count }};
            
            if (conflictCount > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Automatic Conflict Resolution**
                
                I detected ${conflictCount} merge conflicts and attempted to resolve them automatically.
                
                **Resolution Actions:**
                - ✅ Merged .gitignore entries intelligently
                - ✅ Combined Gradle build configurations
                - ✅ Resolved documentation conflicts
                - ✅ Applied conflict resolution strategies
                
                **Next Steps:**
                1. Review the automated changes
                2. Test the merged functionality
                3. Update the PR description if needed
                
                If you notice any issues with the automatic resolution, please review the changes manually.
                
                _Generated by the Pull Request Conflict Resolution workflow_`
              });
            }

  validate-resolution:
    runs-on: ubuntu-latest
    needs: [detect-conflicts, auto-resolve-conflicts]
    if: needs.detect-conflicts.outputs.conflicts_count > 0
    
    steps:
      - name: Checkout resolved branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      
      - name: Validate merge ability
        run: |
          git fetch origin ${{ github.base_ref }}
          
          # Test if branch can now merge cleanly
          if git merge-base --is-ancestor origin/${{ github.base_ref }} HEAD; then
            echo "✅ Branch is ahead of target - resolution successful!"
          elif git merge-tree origin/${{ github.base_ref }} HEAD | grep -q "<<<<<<"; then
            echo "❌ Conflicts still exist after resolution"
            exit 1
          else
            echo "✅ No conflicts detected - resolution successful!"
          fi
      
      - name: Create validation comment
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Conflict Resolution Validation**
              
              The automatic conflict resolution has been validated successfully!
              
              - Branch can now merge cleanly with \`${{ github.base_ref }}\`
              - No remaining merge conflicts detected
              - Ready for review and merge
              
              _Validation completed by the Pull Request Conflict Resolution workflow_`
            });
      
      - name: Create failure comment
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `❌ **Conflict Resolution Failed**
              
              The automatic conflict resolution was unsuccessful. Manual intervention is required.
              
              **Recommended Actions:**
              1. Review the conflicted files manually
              2. Use \`git merge origin/${{ github.base_ref }}\` locally
              3. Resolve conflicts using your preferred merge tool
              4. Test the merged functionality thoroughly
              5. Push the resolved changes
              
              **Common Conflict Types:**
              - Code logic conflicts (require human judgment)
              - Complex configuration changes
              - Overlapping feature implementations
              
              _Report generated by the Pull Request Conflict Resolution workflow_`
            });