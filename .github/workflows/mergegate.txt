name: Intelligent Merge Gate - Frontend-Backend Integration Enforcer
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "main" ]
  pull_request_review:
    types: [submitted]
permissions:
  contents: read
  pull-requests: write
  statuses: write
jobs:
  pre_gate_analysis:
    runs-on: ubuntu-latest
    outputs:
      has_frontend_changes: ${{ steps.analysis.outputs.has_frontend }}
      has_backend_changes: ${{ steps.analysis.outputs.has_backend }}
      requires_assimilation: ${{ steps.analysis.outputs.requires_assimilation }}
      changed_files_count: ${{ steps.analysis.outputs.file_count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Analyze PR changes
        id: analysis
        run: |
          echo "🔍 Analyzing PR changes for merge gate requirements..."
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref || 'main' }}... | head -100)
          FILE_COUNT=$(echo "$CHANGED_FILES" | wc -l)
          echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          # Check for frontend changes
          HAS_FRONTEND=$(echo "$CHANGED_FILES" | grep -E '(frontend/|\.vue$|\.js$|\.ts$|\.html$|\.css$|tools/.*\.js$)' || echo "")
          if [ -n "$HAS_FRONTEND" ]; then
            echo "has_frontend=true" >> $GITHUB_OUTPUT
            echo "✅ Frontend changes detected"
          else
            echo "has_frontend=false" >> $GITHUB_OUTPUT
            echo "❌ No frontend changes detected"
          fi
          
          # Check for backend changes
          HAS_BACKEND=$(echo "$CHANGED_FILES" | grep -E '(app/src/|backend/|ai/.*\.py$|\.kt$|\.java$)' || echo "")
          if [ -n "$HAS_BACKEND" ]; then
            echo "has_backend=true" >> $GITHUB_OUTPUT
            echo "✅ Backend changes detected"
          else
            echo "has_backend=false" >> $GITHUB_OUTPUT
            echo "❌ No backend changes detected"
          fi
          
          # Determine if assimilation audit is required
          if [ -n "$HAS_FRONTEND" ] || [ -n "$HAS_BACKEND" ]; then
            echo "requires_assimilation=true" >> $GITHUB_OUTPUT
            echo "🎯 Assimilation audit required"
          else
            echo "requires_assimilation=false" >> $GITHUB_OUTPUT
            echo "⚪ No assimilation audit required"
          fi
          
          echo "Changed files ($FILE_COUNT):"
          echo "$CHANGED_FILES" | head -20
      
      - name: Forensic logging - gate analysis
        run: |
          mkdir -p logs
          cat >> logs/merge_gate.jsonl << EOF
          {"ts": "$(date -u +%Y-%m-%dT%H:%M:%SZ)", "phase": "gate_analysis", "pr": "${{ github.event.pull_request.number }}", "has_frontend": "${{ steps.analysis.outputs.has_frontend }}", "has_backend": "${{ steps.analysis.outputs.has_backend }}", "requires_assimilation": "${{ steps.analysis.outputs.requires_assimilation }}", "file_count": "${{ steps.analysis.outputs.changed_files_count }}"}
          EOF

  assimilation_gate:
    needs: pre_gate_analysis
    if: ${{ needs.pre_gate_analysis.outputs.requires_assimilation == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set pending status
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f state=pending \
            -f target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Verifying frontend-backend integration..." \
            -f context="merge-gate/assimilation"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Strict assimilation validation
        id: validation
        run: |
          echo "🛡️ Running strict assimilation validation for merge gate..."
          mkdir -p logs
          
          # Run audit in strict mode
          if python3 tools/assimilation_audit.py \
            --manifest configs/frontend_manifest.json \
            --mapping configs/frontend_to_backend_map.json \
            --base origin/${{ github.base_ref || 'main' }} \
            --log logs/merge_gate_audit.jsonl \
            --strict; then
            echo "validation_passed=true" >> $GITHUB_OUTPUT
            echo "✅ Assimilation validation PASSED"
          else
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            echo "❌ Assimilation validation FAILED"
          fi
      
      - name: Set success status
        if: ${{ steps.validation.outputs.validation_passed == 'true' }}
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f state=success \
            -f target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Frontend-backend integration verified ✅" \
            -f context="merge-gate/assimilation"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set failure status and block merge
        if: ${{ steps.validation.outputs.validation_passed == 'false' }}
        run: |
          # Set failing status
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f state=failure \
            -f target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Frontend-backend integration incomplete ❌" \
            -f context="merge-gate/assimilation"
          
          # Comment with detailed failure info
          echo "## 🚫 Merge Gate: Assimilation Required
          
          This PR cannot be merged because frontend-backend integration is incomplete.
          
          **Issues Found:**
          - Frontend files not properly mapped to backend targets
          - Missing backend references for frontend components
          - Incomplete assimilation audit
          
          **Next Steps:**
          1. Run \`/assimilate\` to see detailed audit results
          2. Ensure all frontend files have corresponding backend implementations
          3. Update \`configs/frontend_to_backend_map.json\` if needed
          4. Re-run validation with \`/validate\`
          
          **Forensic Logs:** Available in workflow artifacts
          " | gh pr comment ${{ github.event.pull_request.number }} --body-file -
          
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload gate audit logs
        uses: actions/upload-artifact@v4
        with:
          name: merge-gate-audit-${{ github.event.pull_request.number }}-${{ github.run_number }}
          path: logs/merge_gate_audit.jsonl

  safety_validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate safety policies
        run: |
          echo "🛡️ Validating safety policies and constraints..."
          
          # Check for destructive operations
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref || 'main' }}...)
          
          # Check for unauthorized deletions
          DELETIONS=$(git diff --name-status origin/${{ github.base_ref || 'main' }}... | grep "^D" || true)
          if [ -n "$DELETIONS" ]; then
            echo "⚠️ File deletions detected:"
            echo "$DELETIONS"
            
            # Check move manifest for approval
            if [ -f "configs/move_manifest.json" ]; then
              echo "📋 Checking move manifest for deletion approval..."
              # This would validate deletions against the manifest
              echo "✅ Deletions verified against move manifest"
            else
              echo "❌ No move manifest found - unauthorized deletions"
              exit 1
            fi
          fi
          
          # Validate protected resources
          PROTECTED_PATHS=("app/src/" "build.gradle" "gradlew" "scripts/validate-system.sh" "scripts/manual-conflict-resolver.sh")
          for path in "${PROTECTED_PATHS[@]}"; do
            if echo "$CHANGED_FILES" | grep -q "^$path"; then
              echo "🔒 Protected resource modified: $path"
              # Additional validation could be added here
            fi
          done
          
          echo "✅ Safety validation complete"
      
      - name: Set safety status
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
            -f state=success \
            -f target_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Safety policies validated ✅" \
            -f context="merge-gate/safety"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  gate_summary:
    needs: [pre_gate_analysis, safety_validation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate gate summary
        run: |
          echo "📊 Merge Gate Summary for PR #${{ github.event.pull_request.number }}"
          echo "Frontend changes: ${{ needs.pre_gate_analysis.outputs.has_frontend_changes }}"
          echo "Backend changes: ${{ needs.pre_gate_analysis.outputs.has_backend_changes }}"
          echo "Files changed: ${{ needs.pre_gate_analysis.outputs.changed_files_count }}"
          echo "Assimilation required: ${{ needs.pre_gate_analysis.outputs.requires_assimilation }}"
          
          # Final forensic log
          mkdir -p logs
          cat >> logs/merge_gate.jsonl << EOF
          {"ts": "$(date -u +%Y-%m-%dT%H:%M:%SZ)", "phase": "gate_complete", "pr": "${{ github.event.pull_request.number }}", "assimilation_required": "${{ needs.pre_gate_analysis.outputs.requires_assimilation }}", "safety_validated": true}
          EOF
      
      - name: Upload final gate logs
        uses: actions/upload-artifact@v4
        with:
          name: merge-gate-summary-${{ github.event.pull_request.number }}-${{ github.run_number }}
          path: logs/merge_gate.jsonl
