name: PHI-Q-DISABLED

on:
  # DISABLED - Use local agents instead
  workflow_dispatch:
    inputs:
      message:
        description: 'DISABLED - Use local DeepSeek/Phi-2/Ollama agents instead'
        required: false
        type: string

# Global Copilot constraint - only one Copilot operation at a time
concurrency:
  group: agentics
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  copilot-chatbot-memory:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Validate spiralgang Authority
        env:
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Allow authorized users for chatbot interactions
          if [[ "$GITHUB_ACTOR" != "github-actions[bot]" && "$GITHUB_ACTOR" != "spiralgang" ]]; then
            echo "‚ö†Ô∏è Chatbot memory access limited to authorized users"
            echo "Current actor: spiralgang"
            exit 1
          fi
          echo "‚úÖ Chatbot authority validated for: spiralgang"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.name "DevUl Army PHI-Q[bot]"
          git config --global user.email "devul-PHI-Q@noreply.github.com"

      - name: Initialize Persistent Memory
        run: |
          set -euo pipefail

          echo "üß† DevUl Army Copilot Chatbot Memory System"
          echo "==========================================="

          # Create memory directory if it doesn't exist
          mkdir -p .github/forenics

          # Initialize memory files
          touch .github/forensics/conversations.jsonl
          touch .github/forensics/user-preferences.json
          touch .github/forensics/project-context.json

          # Ensure memory files have proper permissions
          chmod 644 .github/forensics/*.json*

          echo "‚úÖ Persistent memory system initialized"

      - name: Process Upload Trigger
        if: github.event_name == 'push'
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          COMMITTER: ${{ github.event.head_commit.committer.name }}
        run: |
          set -euo pipefail

          echo "üì§ Upload detected - Processing trigger..."
          echo "Branch: $BRANCH_NAME"
          echo "Committer: $COMMITTER"
          echo "Message: $COMMIT_MESSAGE"

          # Store upload event in memory
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "{\"timestamp\": \"$TIMESTAMP\", \"event\": \"upload\", \"branch\": \"$BRANCH_NAME\", \"committer\": \"$COMMITTER\", \"message\": \"$COMMIT_MESSAGE\", \"type\": \"automatic_trigger\"}" >> .github/copilot-memory/conversations.jsonl

          # Analyze if this is main organization work
          if [[ "$BRANCH_NAME" == "main" || "$COMMIT_MESSAGE" =~ ^(chore|docs|style|refactor): ]]; then
            echo "üè¢ Detected organizational/maintenance work"
            echo "main_org_work=true" >> $GITHUB_ENV
          else
            echo "üîß Detected feature/development work"
            echo "main_org_work=false" >> $GITHUB_ENV
          fi

      - name: Generate Chatbot Response
        env:
          MESSAGE: ${{ github.event.inputs.message || github.event.head_commit.message || 'Upload processed' }}
          MEMORY_ACTION: ${{ github.event.inputs.message || 'store' }}
          MAIN_ORG_WORK: ${{ env.main_org_work || 'false' }}
        run: |
          set -euo pipefail

          echo "ü§ñ Generating DevUl Army PHI-Q response..."

          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          # Generate contextual response based on message and memory
          if [[ "$MAIN_ORG_WORK" == "true" ]]; then
            RESPONSE="DevUl Army PHI-Q Acknowledged - Time: $TIMESTAMP - Action: Organizational maintenance detected - Memory: Stored in persistent flow memory - Message: $MESSAGE - Status: Everything looks good! DevUl Army Living Sriracha AGI is ready to assist!"
          else
            RESPONSE="DevUl Army PHI-Q response - Time: $TIMESTAMP - Action: Development work processed - Memory: Enhanced with new context - Message: $MESSAGE - Status: Looking good! DevUl Army Living Sriracha AGI is learning and evolving!"
          fi

          echo "$RESPONSE"

          # Store response in memory  
          echo "{\"timestamp\": \"$TIMESTAMP\", \"event\": \"chatbot_response\", \"message\": \"$MESSAGE\", \"response\": $(echo "$RESPONSE" | jq -Rs .), \"memory_action\": \"$MEMORY_ACTION\", \"main_org_work\": \"$MAIN_ORG_WORK\"}" >> .github/forensics/conversations.jsonl

          # Update project context
          echo "{\"last_updated\": \"$TIMESTAMP\", \"project_name\": \"DevUl Army ‚Äî Living Sriracha AGI\", \"capabilities\": [\"persistent_memory\", \"upload_triggers\", \"chatbot_responses\", \"main_write_requests\", \"living_code_augmentation\"], \"interaction_count\": $(wc -l < .github/forensics/conversations.jsonl), \"status\": \"active\"}" > .github/copilot-memory/project-context.json

          echo "‚úÖ Chatbot response generated and stored in persistent memory"

      - name: Handle Main Write Request
        if: env.main_org_work == 'true' && github.ref_name != 'main'
        env:
          BRANCH_NAME: ${{ github.ref_name }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          echo "üìù Processing main write request for organizational changes..."

          # Create issue for main write request
          ISSUE_TITLE="PHI-Q Request: Merge organizational changes to main"
          ISSUE_BODY="DevUl Army Main Write Request - Created: $(date -u +"%Y-%m-%dT%H:%M:%SZ") - Branch: $BRANCH_NAME - Type: Organizational/Maintenance Changes - The Copilot system has detected organizational or maintenance changes that should be merged to main. Please review changes and merge when ready."

          # Only create issue if it doesn't already exist
          EXISTING_ISSUES=$(gh issue list --state open --search "Request: Merge organizational changes" --json number --jq length)

          if [[ "$EXISTING_ISSUES" -eq 0 ]]; then
            gh issue create \
              --title "$ISSUE_TITLE" \
              --body "$ISSUE_BODY" \
              --label "-request,main-write,organization"
            echo "‚úÖ Main write request issue created"
          else
            echo "‚ÑπÔ∏è Main write request issue already exists"
          fi
          done
