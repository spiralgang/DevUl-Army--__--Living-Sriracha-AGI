name: Auto Merge-Ahead & Prune Copilot Branches

on:
  schedule:
    - cron: '0 3 * * *'   # Runs daily at 03:00 UTC
  workflow_dispatch:

# Global Copilot constraint - only one Copilot operation at a time
concurrency:
  group: copilot-operations
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  merge-and-prune:
    runs-on: ubuntu-latest
    
    steps:
      - name: Validate Copilot Authority
        env:
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          # Only allow Copilot (github-actions[bot]) to create branches/issues
          if [[ "$GITHUB_ACTOR" != "github-actions[bot]" && "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "‚ùå Only Copilot can execute workflow operations"
            exit 1
          fi
          echo "‚úÖ Copilot authority validated"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Set up Git
        run: |
          git config --global user.name "Copilot Auto-Merge[bot]"
          git config --global user.email "copilot@noreply.github.com"

      - name: Fetch all branches
        run: git fetch --all --prune

      - name: Intelligent merge and prune
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          echo "ü§ñ Copilot Auto-Merge & Prune System Active"
          
          MAIN_BRANCH="main"
          BRANCHES=($(git branch -r | grep 'origin/copilot/fix-' | sed 's|origin/||' || true))
          
          if [ ${#BRANCHES[@]} -eq 0 ]; then
            echo "‚ÑπÔ∏è  No copilot branches to process"
            exit 0
          fi
          
          echo "üìã Found ${#BRANCHES[@]} copilot branches to process"
          
          for BRANCH in "${BRANCHES[@]}"; do
            echo "::group::üîç Processing $BRANCH"
            
            # Fetch branch safely
            if ! git fetch origin "$BRANCH":"$BRANCH" 2>/dev/null; then
              echo "‚ö†Ô∏è  Failed to fetch $BRANCH, skipping"
              echo "::endgroup::"
              continue
            fi
            
            # Check merge status
            AHEAD=$(git rev-list --left-right --count origin/$MAIN_BRANCH...$BRANCH 2>/dev/null | awk '{print $2}' || echo "0")
            BEHIND=$(git rev-list --left-right --count origin/$MAIN_BRANCH...$BRANCH 2>/dev/null | awk '{print $1}' || echo "0")
            
            echo "üìä $BRANCH: $AHEAD commits ahead, $BEHIND commits behind $MAIN_BRANCH"
            
            if [ "$AHEAD" -gt 0 ]; then
              echo "üîÑ Merging $BRANCH into $MAIN_BRANCH"
              git checkout $MAIN_BRANCH
              git pull origin $MAIN_BRANCH
              
              if git merge --no-ff $BRANCH -m "ü§ñ Auto-merge: $BRANCH ‚Üí $MAIN_BRANCH"; then
                git push origin $MAIN_BRANCH
                gh api -X DELETE "repos/${GITHUB_REPOSITORY}/git/refs/heads/$BRANCH" || true
                echo "‚úÖ $BRANCH merged and deleted successfully"
              else
                echo "‚ùå Merge conflict detected for $BRANCH, skipping"
                git merge --abort
              fi
            else
              echo "üóëÔ∏è  $BRANCH has no new commits, deleting"
              gh api -X DELETE "repos/${GITHUB_REPOSITORY}/git/refs/heads/$BRANCH" || true
              echo "‚úÖ $BRANCH deleted"
            fi
            
            echo "::endgroup::"
          done
          
          echo "üéâ Copilot branch hygiene completed"

      - name: Generate operation summary
        if: always()
        run: |
          echo "üìà Copilot Auto-Merge Summary:"
          echo "- Operation: Branch merge and cleanup"
          echo "- Branches processed: $(git branch -r | grep -c 'origin/copilot/fix-' || echo '0')"
          echo "- Date: $(date -u)"
          echo "- Status: Complete"