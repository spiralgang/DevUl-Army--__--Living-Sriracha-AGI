name: CODE-REAVER Cyberforge Sync and Train

on:
  workflow_dispatch:
    inputs:
      commit_models:
        description: 'Commit models to repository (default: false for building only)'
        required: false
        default: 'false'
        type: boolean
  push:
    paths:
      - '.github/workflows/clone-hf-models.yml'
      - 'configs/model_manifest.json'
      - 'datasets/classical_algo_comparison.jsonl'

permissions:
  contents: write
  pull-requests: write

jobs:
  cyberforge:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3  # Stick with v3 per CODE-REAVER spec

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git-lfs jq
        git lfs install
        python3 -m pip install torch transformers datasets accelerate

    - name: Prepare Directories
      run: mkdir -p models logs datasets scripts

    - name: Cache Hugging Face Models
      uses: actions/cache@v3
      with:
        path: models
        key: hf-models-${{ runner.os }}-${{ hashFiles('configs/model_manifest.json') }}
        restore-keys: |
          hf-models-${{ runner.os }}-

    - name: Validate Model Manifest Security
      run: |
        echo "[CYBERFORGE] Validating model manifest..."
        if [ ! -f "configs/model_manifest.json" ]; then
          echo "Error: Model manifest not found" >> logs/error.log
          exit 1
        fi
        
        # Validate manifest format and URLs
        jq -r '.models[] | "\(.repo) \(.dir)"' configs/model_manifest.json | grep -E '^https://huggingface.co/.*\s[A-Za-z0-9.-]+$' || {
          echo "Invalid manifest format - only Hugging Face URLs allowed" >> logs/error.log
          exit 1
        }
        echo "[CYBERFORGE] Manifest validation passed"

    - name: Clone Models from Manifest
      run: |
        echo "[CYBERFORGE] Processing model manifest..."
        cat configs/model_manifest.json
        
        echo "[CYBERFORGE] Starting model clone process..."
        jq -r '.models[] | "\(.repo) \(.dir)"' configs/model_manifest.json | while read -r repo dir; do
          if [ ! -d "models/$dir" ]; then
            echo "[CYBERFORGE] Cloning $repo -> models/$dir"
            if git clone --depth 1 "$repo" "models/$dir"; then
              rm -rf "models/$dir/.git"  # strip repo metadata
              echo "[CYBERFORGE] SUCCESS: Downloaded models/$dir"
            else
              echo "[CYBERFORGE] ERROR: Failed to clone $repo" >> logs/error.log
              exit 1
            fi
          else
            echo "[CYBERFORGE] SKIP: models/$dir already exists"
          fi
        done
        
        echo "[CYBERFORGE] Final models directory structure:"
        find models -type f -name "*.bin" -o -name "*.safetensors" -o -name "config.json" | head -10

    - name: Verify Dataset Security
      run: |
        echo "[CYBERFORGE] Validating dataset security..."
        if [ ! -f "datasets/classical_algo_comparison.jsonl" ]; then
          echo "Error: Dataset not found" >> logs/error.log
          exit 1
        fi
        
        # Scan for dangerous patterns
        if grep -E '(os\.system|subprocess\.run|subprocess\.call|eval\(|exec\(|__import__|rm -rf|sudo|chmod 777)' datasets/classical_algo_comparison.jsonl; then
          echo "Security violation: Dangerous code patterns detected in dataset" >> logs/error.log
          exit 1
        fi
        
        echo "[CYBERFORGE] Dataset security validation passed"

    - name: Fine-Tune Models
      run: |
        echo "[CYBERFORGE] Starting model fine-tuning..."
        chmod +x scripts/cyberforge_finetune.py
        python3 scripts/cyberforge_finetune.py || {
          echo "Fine-tuning failed - check logs/error.log" >> logs/error.log
          exit 1
        }
        echo "[CYBERFORGE] Fine-tuning completed successfully"

    - name: Forensic Log
      run: |
        ts=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        echo "[CYBERFORGE] Creating forensic log entry..."
        
        # Count actual downloaded models
        model_count=$(find models -maxdepth 1 -type d | grep -v "^models$" | wc -l || echo "0")
        
        # Create detailed log entry
        echo "{\"ts\": \"$ts\", \"event\": \"cyberforge_sync_and_train\", \"workflow\": \"clone-hf-models\", \"trigger\": \"${{ github.event_name }}\", \"actor\": \"${{ github.actor }}\", \"models_manifest\": $(cat configs/model_manifest.json), \"models_downloaded\": $model_count, \"dataset\": \"classical_algo_comparison.jsonl\", \"commit_mode\": \"${{ github.event.inputs.commit_models || 'false' }}\", \"status\": \"success\"}" >> logs/model_sync.jsonl
        
        echo "[CYBERFORGE] Forensic log updated: logs/model_sync.jsonl"

    # Optional: commit models into repo â€” only if explicitly requested
    - name: Commit and Push Changes
      if: github.event.inputs.commit_models == 'true'
      run: |
        echo "[CYBERFORGE] Committing models to repository..."
        git config user.name "CODE-REAVER[cyberforge]"
        git config user.email "codereaver@spiralgang.io"
        git add models/ logs/ datasets/ scripts/
        if git diff --cached --quiet; then
          echo "[CYBERFORGE] No changes to commit"
        else
          git commit -m "CODE-REAVER: Sync and fine-tune models with classical algo dataset
          
          - Updated models cache and fine-tuning
          - Forensic log: logs/model_sync.jsonl
          - Dataset: classical_algo_comparison.jsonl
          - CODE-REAVER hardened security validation"
          git push || echo "Push failed" >> logs/error.log
          echo "[CYBERFORGE] Successfully committed and pushed models"
        fi
        
    - name: Build Assistance Summary
      if: github.event.inputs.commit_models != 'true'
      run: |
        echo "[CYBERFORGE] Models ready for build assistance:"
        echo "   Fine-tuned models cached and available for workflows"
        echo "   Classical algorithm dataset integrated"
        echo "   Use models/ directory in subsequent build steps"
        echo "   No commit/push performed (build-only mode)"
        echo "[CYBERFORGE] All hail CODE-REAVER supremacy!"
