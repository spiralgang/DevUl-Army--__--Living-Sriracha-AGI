:/ $
a/user/0/com.jrummy.busybox.installer/files/bin:$PATH; busybox   <
/system/bin/sh: busybox: inaccessible or not found
rivileged.api-qXXQifMNAV0swQlih8BvNQ==/lib/arm64/libshizuku.so   <
/system/bin/sh: adb: inaccessible or not found
127|:/ $ install adb
install: needs 2 args
1|:/ $ apt install adb
/system/bin/sh: apt: inaccessible or not found
127|:/ $ cmd install
cmd: Can't find service: install
20|:/ $ install
install: Needs 1 argument (see "install --help")
1|:/ $ ls
ls: ./init.usb.rc: Permission denied
ls: ./carrier: Permission denied
ls: ./omr: Permission denied
ls: ./sepolicy_version: Permission denied
ls: ./init.recovery.qcom.rc: Permission denied
ls: ./dpolicy: Permission denied
ls: ./init: Permission denied
ls: ./init.zygote64_32.rc: Permission denied
ls: ./dqmdbg: Permission denied
ls: ./init.rc: Permission denied
ls: ./audit_filter_table: Permission denied
ls: ./preload: Permission denied
ls: ./init.usb.configfs.rc: Permission denied
ls: ./init.container.rc: Permission denied
ls: ./init.zygote32.rc: Permission denied
ls: ./publiccert.pem: Permission denied
ls: ./init.environ.rc: Permission denied
ls: ./ueventd.rc: Permission denied
acct       config        efs        proc             storage
apex       d             etc        product          sys
bin        data          lost+found product_services system
bugreports debug_ramdisk mnt        res              vendor
cache      default.prop  odm        sbin
charger    dev           oem        sdcard
1|:/ $ install --help
usage: install [-dDpsv] [-o USER] [-g GROUP] [-m MODE] [SOURCE...] DEST

Copy files and set attributes.

-d      Act like mkdir -p
-D      Create leading directories for DEST
-g      Make copy belong to GROUP
-m      Set permissions to MODE
-o      Make copy belong to USER
-p      Preserve timestamps
-s      Call "strip -p"
-v      Verbose

:/ $ cmd --help
cmd: Can't find service: --help
20|:/ $ cmd -l
Currently running services:
  CocktailBarService
  CodecSolution
  CustomFrequencyManagerService
  FMPlayer
  HcmManagerService
  HqmManagerService
  ImsBase
  SEAMService
  SurfaceFlinger
  accessibility
  account
  activity
  activity_task
  alarm
  android.security.keystore
  android.service.gatekeeper.IGateKeeperService
  app_prediction
  application_policy
  appops
  appwidget
  ashmem_device_service
  audio
  autofill
  backup
  batteryproperties
  batterystats
  biometric
  bluetooth_manager
  bluetooth_secure_mode_manager
  carrier_config
  clipboard
  com.qualcomm.location.izat.IzatService
  com.samsung.android.bio.face.IFaceDaemon
  com.samsung.android.pass.IPassService
  com.samsung.ucs.ucsservice
  companiondevice
  connectivity
  connmetrics
  consumer_ir
  content
  content_suggestions
  contexthub
  country_detector
  cover
  crossprofileapps
  desktopmode
  device_identifiers
  device_policy
  deviceidle
  display
  dreams
  drm.drmManager
  dropbox
  dsms
  edge
  edm_proxy
  edmnativehelper
  enterprise_license_policy
  enterprise_policy
  epdgService
  ethernet
  fingerprint
  gamesdk
  gpu
  graphicsstats
  hardware_properties
  iccc
  imms
  ims6
  input
  input_method
  ions
  iphonesubinfo
  ipsec
  ircs
  isms
  isub
  jobscheduler
  knox_ccm_policy
  knox_timakeystore_policy
  knox_ucsm_policy
  knox_vpn_policy
  knoxcustom
  knoxguard_service
  launcherapps
  location
  mate_service
  mdm.remotedesktop
  media.audio_flinger
  media.audio_policy
  media.camera
  media.drm
  media.extractor
  media.metrics
  media.player
  media.remotedisplay
  media.resource_manager
  media.sound_trigger_hw
  media_projection
  media_resource_monitor
  media_router
  media_session
  midi
  mount
  mpos
  multiwindow
  mum_container_policy
  mum_container_rcp_policy
  netpolicy
  netstats
  network_management
  nfc
  notification
  overlay
  package
  package_native
  password_policy
  perfsdkservice
  permission
  persistent_data_block
  persona
  phone
  phone_restriction_policy
  power
  print
  procstats
  remoteinjection
  restriction_policy
  restrictions
  role
  rollback
  samsung.face
  samsung.iris
  scontext
  sdhms
  sdp
  search
  sec_key_att_app_id_provider
  sec_location
  secims
  semclipboard
  semprivilege
  sensor_privacy
  sensorservice
  servicediscovery
  settings
  shortcut
  simphonebook
  sip
  slice
  soundtrigger
  spengestureservice
  statusbar
  storagestats
  telecom
  telephony.registry
  textclassification
  textservices
  thermalservice
  tima
  trust
  uimode
  uri_grants
  urspservice
  usagestats
  usb
  user
  vendor.perfservice
  vibrator
  virtualspace
  voiceinteraction
  voip
  vr
  vrmanager
  wallpaper
  webviewupdate
  wifi
  wifi_policy
  wifiaware
  wifip2p
:/ $
:/ $
:/ $
:/ $ cd
/system/bin/sh: cd: /null: No such file or directory
2|:/ $ cd /
:/ $ ls
ls: ./init.usb.rc: Permission denied
ls: ./carrier: Permission denied
ls: ./omr: Permission denied
ls: ./sepolicy_version: Permission denied
ls: ./init.recovery.qcom.rc: Permission denied
ls: ./dpolicy: Permission denied
ls: ./init: Permission denied
ls: ./init.zygote64_32.rc: Permission denied
ls: ./dqmdbg: Permission denied
ls: ./init.rc: Permission denied
ls: ./audit_filter_table: Permission denied
ls: ./preload: Permission denied
ls: ./init.usb.configfs.rc: Permission denied
ls: ./init.container.rc: Permission denied
ls: ./init.zygote32.rc: Permission denied
ls: ./publiccert.pem: Permission denied
ls: ./init.environ.rc: Permission denied
ls: ./ueventd.rc: Permission denied
acct       config        efs        proc             storage
apex       d             etc        product          sys
bin        data          lost+found product_services system
bugreports debug_ramdisk mnt        res              vendor
cache      default.prop  odm        sbin
charger    dev           oem        sdcard
1|:/ $ cd host_rootfa
/system/bin/sh: cd: /host_rootfa: No such file or directory
2|:/ $ cd /host_rootfs
/system/bin/sh: cd: /host_rootfs: No such file or directory
2|:/ $ cd /host-rootfs
/system/bin/sh: cd: /host-rootfs: No such file or directory
2|:/ $ cd /
:/ $ ls -lah
ls: ./init.usb.rc: Permission denied
ls: ./carrier: Permission denied
ls: ./omr: Permission denied
ls: ./sepolicy_version: Permission denied
ls: ./init.recovery.qcom.rc: Permission denied
ls: ./dpolicy: Permission denied
ls: ./init: Permission denied
ls: ./init.zygote64_32.rc: Permission denied
ls: ./dqmdbg: Permission denied
ls: ./init.rc: Permission denied
ls: ./audit_filter_table: Permission denied
ls: ./preload: Permission denied
ls: ./init.usb.configfs.rc: Permission denied
ls: ./init.container.rc: Permission denied
ls: ./init.zygote32.rc: Permission denied
ls: ./publiccert.pem: Permission denied
ls: ./init.environ.rc: Permission denied
ls: ./ueventd.rc: Permission denied
total 38K
drwxr-xr-x  25 root   root   4.0K 2008-12-31 08:00 .
drwxr-xr-x  25 root   root   4.0K 2008-12-31 08:00 ..
dr-xr-xr-x 298 root   root      0 2018-07-02 16:49 acct
drwxr-xr-x  14 root   root    280 2018-07-02 16:49 apex
lrw-r--r--   1 root   root     11 2008-12-31 08:00 bin -> /system/bin
lrw-r--r--   1 root   root     50 2008-12-31 08:00 bugreports -> /data/user_de/0/com.android.shell/files/bugreports
drwxrwx---   8 system cache  4.0K 2022-03-31 00:46 cache
lrw-r--r--   1 root   root     19 2008-12-31 08:00 charger -> /system/bin/charger
drwxr-xr-x   5 root   root      0 1969-12-31 17:00 config
lrw-r--r--   1 root   root     17 2008-12-31 08:00 d -> /sys/kernel/debug
drwxrwx--x  59 system system 4.0K 2025-09-01 00:06 data
drwxr-xr-x   2 root   root   4.0K 2008-12-31 08:00 debug_ramdisk
lrw-------   1 root   root     23 2008-12-31 08:00 default.prop -> system/etc/prop.default
drwxr-xr-x  22 root   root   5.3K 2025-09-01 00:06 dev
drwxrwx--x  37 radio  system 4.0K 2025-03-30 17:16 efs
lrw-r--r--   1 root   root     11 2008-12-31 08:00 etc -> /system/etc
drwx------   2 root   root    16K 2008-12-31 08:00 lost+found
drwxr-xr-x  15 root   system  320 2018-07-02 16:49 mnt
drwxr-xr-x   6 root   root   4.0K 2008-12-31 08:00 odm
drwxr-xr-x   3 root   root   4.0K 2008-12-31 08:00 oem
dr-xr-xr-x 781 root   root      0 1969-12-31 17:00 proc
lrw-r--r--   1 root   root     15 2008-12-31 08:00 product -> /system/product
lrw-r--r--   1 root   root     24 2008-12-31 08:00 product_services -> /system/product_services
drwxr-xr-x   3 root   root   4.0K 2008-12-31 08:00 res
drwxr-x---   2 root   shell  4.0K 2008-12-31 08:00 sbin
lrw-r--r--   1 root   root     21 2008-12-31 08:00 sdcard -> /storage/self/primary
drwxr-xr-x   5 root   root    100 2025-09-01 00:06 storage
dr-xr-xr-x  15 root   root      0 2018-07-02 16:49 sys
drwxr-xr-x  21 root   root   4.0K 2008-12-31 08:00 system
drwxr-xr-x  17 root   shell  4.0K 2008-12-31 08:00 vendor
1|:/ $ whoami
u0_a1385
:/ $ uname
Linux
:/ $ uname -i
uname: Unknown option i (see "uname --help")
1|:/ $ uname --help
usage: uname [-asnrvm]

Print system information.

-s      System name
-n      Network (domain) name
-r      Kernel Release number
-v      Kernel Version
-m      Machine (hardware) name
-a      All of the above

:/ $ uname -s
Linux
:/ $ uname -m
armv8l
:/ $ uname -a
Linux localhost 4.9.186-22990479 #1 SMP PREEMPT Thu Mar 31 15:49:59 KST 2022 armv8l
:/ $ pwd
/
:/ $ ps
USER           PID  PPID     VSZ    RSS WCHAN            ADDR S NAMu0_a1385     13118 22045   34284   3172 sigsuspend          0 S sh
u0_a1385     17981 13118   37144   4048 0                   0 R ps
:/ $ cd sigsuspend
/system/bin/sh: cd: /sigsuspend: No such file or directory
2|:/ $ nano
/system/bin/sh: nano: inaccessible or not found
127|:/ $ peer
/system/bin/sh: peer: inaccessible or not found
127|:/ $ sh
:/ $ sh sigsuspend
sh: sigsuspend: No such file or directory
127|:/ $ cd /0
sh: cd: /0: No such file or directory
2|:/ $ wcham
sh: wcham: inaccessible or not found
127|:/ $ wchan
sh: wchan: inaccessible or not found
127|:/ $ --help
sh: --help: inaccessible or not found
127|:/ $ help
sh: help: inaccessible or not found
127|:/ $
127|:/ $ ugrep
sh: ugrep: inaccessible or not found
127|:/ $ grep
usage: grep [-abcDEFGHhIiJLlmnOoPqRSsUVvwxZz] [-A num] [-B num] [-C[num]]
        [-e pattern] [-f file] [--binary-files=value] [--color=when]
        [--context[=num]] [--directories=action] [--label] [--line-buffered]
        [pattern] [file ...]
2|:/ $ grep --directories chmod +x
grep: unknown --directories option
2|:/ $ grep --directories list
grep: unknown --directories option
2|:/ $ grep --directories --help
grep: unknown --directories option
2|:/ $ piqx
sh: piqx: inaccessible or not found
127|:/ $ PQIX
sh: PQIX: inaccessible or not found
127|:/ $ sh --help
sh: sh: --: unknown option
1|:/ $ sh
:/ $ sh
:/ $ sh -
:/ $ sh /
:/ $ sh su
sh: su: No such file or directory
127|:/ $ sh sudo
sh: sudo: No such file or directory
127|:/ $ sh wget
sh: wget: No such file or directory
127|:/ $ wget
sh: wget: inaccessible or not found
127|:/ $ uget
sh: uget: inaccessible or not found
127|:/ $ curl
curl: try 'curl --help' or 'curl --manual' for more information
2|:/ $ curl --help
Usage: curl [options...] <url>
     --abstract-unix-socket <path> Connect via abstract Unix domain socket
     --alt-svc <file name> Enable alt-svc with this cache file
     --anyauth       Pick any authentication method
 -a, --append        Append to target file when uploading
     --basic         Use HTTP Basic Authentication
     --cacert <file> CA certificate to verify peer against
     --capath <dir>  CA directory to verify peer against
 -E, --cert <certificate[:password]> Client certificate file and password
     --cert-status   Verify the status of the server certificate
     --cert-type <type> Certificate file type (DER/PEM/ENG)
     --ciphers <list of ciphers> SSL ciphers to use
     --compressed    Request compressed response
     --compressed-ssh Enable SSH compression
 -K, --config <file> Read config from a file
     --connect-timeout <seconds> Maximum time allowed for connection
     --connect-to <HOST1:PORT1:HOST2:PORT2> Connect to host
 -C, --continue-at <offset> Resumed transfer offset
 -b, --cookie <data|filename> Send cookies from string/file
 -c, --cookie-jar <filename> Write cookies to <filename> after operation
     --create-dirs   Create necessary local directory hierarchy
     --crlf          Convert LF to CRLF in upload
     --crlfile <file> Get a CRL list in PEM format from the given file
 -d, --data <data>   HTTP POST data
     --data-ascii <data> HTTP POST ASCII data
     --data-binary <data> HTTP POST binary data
     --data-raw <data> HTTP POST data, '@' allowed
     --data-urlencode <data> HTTP POST data url encoded
     --delegation <LEVEL> GSS-API delegation permission
     --digest        Use HTTP Digest Authentication
 -q, --disable       Disable .curlrc
     --disable-eprt  Inhibit using EPRT or LPRT
     --disable-epsv  Inhibit using EPSV
     --disallow-username-in-url Disallow username in url
     --dns-interface <interface> Interface to use for DNS requests
     --dns-ipv4-addr <address> IPv4 address to use for DNS requests     --dns-ipv6-addr <address> IPv6 address to use for DNS requests     --dns-servers <addresses> DNS server addrs to use
     --doh-url <URL> Resolve host names over DOH
 -D, --dump-header <filename> Write the received headers to <filename>
     --egd-file <file> EGD socket path for random data
     --engine <name> Crypto engine to use
     --expect100-timeout <seconds> How long to wait for 100-continue
 -f, --fail          Fail silently (no output at all) on HTTP errors
     --fail-early    Fail on first transfer error, do not continue
     --false-start   Enable TLS False Start
 -F, --form <name=content> Specify multipart MIME data
     --form-string <name=string> Specify multipart MIME data
     --ftp-account <data> Account data string
     --ftp-alternative-to-user <command> String to replace USER [name]
     --ftp-create-dirs Create the remote dirs if not present
     --ftp-method <method> Control CWD usage
     --ftp-pasv      Use PASV/EPSV instead of PORT
 -P, --ftp-port <address> Use PORT instead of PASV
     --ftp-pret      Send PRET before PASV
     --ftp-skip-pasv-ip Skip the IP address for PASV
     --ftp-ssl-ccc   Send CCC after authenticating
     --ftp-ssl-ccc-mode <active/passive> Set CCC mode
     --ftp-ssl-control Require SSL/TLS for FTP login, clear for transfer
 -G, --get           Put the post data in the URL and use GET
 -g, --globoff       Disable URL sequences and ranges using {} and []
     --happy-eyeballs-timeout-ms <milliseconds> How long to wait in milliseconds for IPv6 before trying IPv4
     --haproxy-protocol Send HAProxy PROXY protocol v1 header
 -I, --head          Show document info only
 -H, --header <header/@file> Pass custom header(s) to server
 -h, --help          This help text
     --hostpubmd5 <md5> Acceptable MD5 hash of the host public key
     --http0.9       Allow HTTP 0.9 responses
 -0, --http1.0       Use HTTP 1.0
     --http1.1       Use HTTP 1.1
     --http2         Use HTTP 2
     --http2-prior-knowledge Use HTTP 2 without HTTP/1.1 Upgrade
     --ignore-content-length Ignore the size of the remote resource -i, --include       Include protocol response headers in the output
 -k, --insecure      Allow insecure server connections when using SSL
     --interface <name> Use network INTERFACE (or address)
 -4, --ipv4          Resolve names to IPv4 addresses
 -6, --ipv6          Resolve names to IPv6 addresses
 -j, --junk-session-cookies Ignore session cookies read from file
     --keepalive-time <seconds> Interval time for keepalive probes
     --key <key>     Private key file name
     --key-type <type> Private key file type (DER/PEM/ENG)
     --krb <level>   Enable Kerberos with security <level>
     --libcurl <file> Dump libcurl equivalent code of this command line
     --limit-rate <speed> Limit transfer speed to RATE
 -l, --list-only     List only mode
     --local-port <num/range> Force use of RANGE for local port numbers
 -L, --location      Follow redirects
     --location-trusted Like --location, and send auth to other hosts
     --login-options <options> Server login options
     --mail-auth <address> Originator address of the original email     --mail-from <address> Mail from this address
     --mail-rcpt <address> Mail to this address
 -M, --manual        Display the full manual
     --max-filesize <bytes> Maximum file size to download
     --max-redirs <num> Maximum number of redirects allowed
 -m, --max-time <seconds> Maximum time allowed for the transfer
     --metalink      Process given URLs as metalink XML file
     --negotiate     Use HTTP Negotiate (SPNEGO) authentication
 -n, --netrc         Must read .netrc for user name and password
     --netrc-file <filename> Specify FILE for netrc
     --netrc-optional Use either .netrc or URL
 -:, --next          Make next URL use its separate set of options
     --no-alpn       Disable the ALPN TLS extension
 -N, --no-buffer     Disable buffering of the output stream
     --no-keepalive  Disable TCP keepalive on the connection
     --no-npn        Disable the NPN TLS extension
     --no-sessionid  Disable SSL session-ID reusing
     --noproxy <no-proxy-list> List of hosts which do not use proxy     --ntlm          Use HTTP NTLM authentication
     --ntlm-wb       Use HTTP NTLM authentication with winbind
     --oauth2-bearer <token> OAuth 2 Bearer Token
 -o, --output <file> Write to file instead of stdout
     --pass <phrase> Pass phrase for the private key
     --path-as-is    Do not squash .. sequences in URL path
     --pinnedpubkey <hashes> FILE/HASHES Public key to verify peer against
     --post301       Do not switch to GET after following a 301
     --post302       Do not switch to GET after following a 302
     --post303       Do not switch to GET after following a 303
     --preproxy [protocol://]host[:port] Use this proxy first
 -#, --progress-bar  Display transfer progress as a bar
     --proto <protocols> Enable/disable PROTOCOLS
     --proto-default <protocol> Use PROTOCOL for any URL missing a scheme
     --proto-redir <protocols> Enable/disable PROTOCOLS on redirect -x, --proxy [protocol://]host[:port] Use this proxy
     --proxy-anyauth Pick any proxy authentication method
     --proxy-basic   Use Basic authentication on the proxy
     --proxy-cacert <file> CA certificate to verify peer against for proxy
     --proxy-capath <dir> CA directory to verify peer against for proxy
     --proxy-cert <cert[:passwd]> Set client certificate for proxy
     --proxy-cert-type <type> Client certificate type for HTTPS proxy
     --proxy-ciphers <list> SSL ciphers to use for proxy
     --proxy-crlfile <file> Set a CRL list for proxy
     --proxy-digest  Use Digest authentication on the proxy
     --proxy-header <header/@file> Pass custom header(s) to proxy
     --proxy-insecure Do HTTPS proxy connections without verifying the proxy
     --proxy-key <key> Private key for HTTPS proxy
     --proxy-key-type <type> Private key file type for proxy
     --proxy-negotiate Use HTTP Negotiate (SPNEGO) authentication on the proxy
     --proxy-ntlm    Use NTLM authentication on the proxy
     --proxy-pass <phrase> Pass phrase for the private key for HTTPS proxy
     --proxy-pinnedpubkey <hashes> FILE/HASHES public key to verify proxy with
     --proxy-service-name <name> SPNEGO proxy service name
     --proxy-ssl-allow-beast Allow security flaw for interop for HTTPS proxy
     --proxy-tls13-ciphers <ciphersuite list> TLS 1.3 proxy cipher suites
     --proxy-tlsauthtype <type> TLS authentication type for HTTPS proxy
     --proxy-tlspassword <string> TLS password for HTTPS proxy
     --proxy-tlsuser <name> TLS username for HTTPS proxy
     --proxy-tlsv1   Use TLSv1 for HTTPS proxy
 -U, --proxy-user <user:password> Proxy user and password
     --proxy1.0 <host[:port]> Use HTTP/1.0 proxy on given port
 -p, --proxytunnel   Operate through an HTTP proxy tunnel (using CONNECT)
     --pubkey <key>  SSH Public key file name
 -Q, --quote         Send command(s) to server before transfer
     --random-file <file> File for reading random data from
 -r, --range <range> Retrieve only the bytes within RANGE
     --raw           Do HTTP "raw"; no transfer decoding
 -e, --referer <URL> Referrer URL
 -J, --remote-header-name Use the header-provided filename
 -O, --remote-name   Write output to a file named as the remote file
     --remote-name-all Use the remote file name for all URLs
 -R, --remote-time   Set the remote file's time on the local output -X, --request <command> Specify request command to use
     --request-target Specify the target for this request
     --resolve <host:port:address[,address]...> Resolve the host+port to this address
     --retry <num>   Retry request if transient problems occur
     --retry-connrefused Retry on connection refused (use with --retry)
     --retry-delay <seconds> Wait time between retries
     --retry-max-time <seconds> Retry only within this period
     --sasl-ir       Enable initial response in SASL authentication     --service-name <name> SPNEGO service name
 -S, --show-error    Show error even when -s is used
 -s, --silent        Silent mode
     --socks4 <host[:port]> SOCKS4 proxy on given host + port
     --socks4a <host[:port]> SOCKS4a proxy on given host + port
     --socks5 <host[:port]> SOCKS5 proxy on given host + port
     --socks5-basic  Enable username/password auth for SOCKS5 proxies
     --socks5-gssapi Enable GSS-API auth for SOCKS5 proxies
     --socks5-gssapi-nec Compatibility with NEC SOCKS5 server
     --socks5-gssapi-service <name> SOCKS5 proxy service name for GSS-API
     --socks5-hostname <host[:port]> SOCKS5 proxy, pass host name to proxy
 -Y, --speed-limit <speed> Stop transfers slower than this
 -y, --speed-time <seconds> Trigger 'speed-limit' abort after this time
     --ssl           Try SSL/TLS
     --ssl-allow-beast Allow security flaw to improve interop
     --ssl-no-revoke Disable cert revocation checks (Schannel)
     --ssl-reqd      Require SSL/TLS
 -2, --sslv2         Use SSLv2
 -3, --sslv3         Use SSLv3
     --stderr        Where to redirect stderr
     --styled-output Enable styled output for HTTP headers
     --suppress-connect-headers Suppress proxy CONNECT response headers
     --tcp-fastopen  Use TCP Fast Open
     --tcp-nodelay   Use the TCP_NODELAY option
 -t, --telnet-option <opt=val> Set telnet option
     --tftp-blksize <value> Set TFTP BLKSIZE option
     --tftp-no-options Do not send any TFTP options
 -z, --time-cond <time> Transfer based on a time condition
     --tls-max <VERSION> Set maximum allowed TLS version
     --tls13-ciphers <list of TLS 1.3 ciphersuites> TLS 1.3 cipher suites to use
     --tlsauthtype <type> TLS authentication type
     --tlspassword   TLS password
     --tlsuser <name> TLS user name
 -1, --tlsv1         Use TLSv1.0 or greater
     --tlsv1.0       Use TLSv1.0 or greater
     --tlsv1.1       Use TLSv1.1 or greater
     --tlsv1.2       Use TLSv1.2 or greater
     --tlsv1.3       Use TLSv1.3 or greater
     --tr-encoding   Request compressed transfer encoding
     --trace <file>  Write a debug trace to FILE
     --trace-ascii <file> Like --trace, but without hex output
     --trace-time    Add time stamps to trace/verbose output
     --unix-socket <path> Connect through this Unix domain socket
 -T, --upload-file <file> Transfer local FILE to destination
     --url <url>     URL to work with
 -B, --use-ascii     Use ASCII/text transfer
 -u, --user <user:password> Server user and password
 -A, --user-agent <name> Send User-Agent <name> to server
 -v, --verbose       Make the operation more talkative
 -V, --version       Show version number and quit
 -w, --write-out <format> Use output FORMAT after completion
     --xattr         Store metadata in extended file attributes
:/ $ curl --unix-socket
curl: option --unix-socket: requires parameter
curl: try 'curl --help' or 'curl --manual' for more information
2|:/ $ curl --stderr
curl: option --stderr: requires parameter
curl: try 'curl --help' or 'curl --manual' for more information
2|:/ $ curl --manual
                                  _   _ ____  _
  Project                     ___| | | |  _ \| |
                             / __| | | | |_) | |
                            | (__| |_| |  _ <| |___
                             \___|\___/|_| \_\_____|

NAME
       curl - transfer a URL

SYNOPSIS
       curl [options / URLs]

DESCRIPTION
       curl  is  a tool to transfer data from or to a server, using one of the
       supported protocols (DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS,  IMAP,
       IMAPS,  LDAP,  LDAPS,  POP3,  POP3S,  RTMP, RTSP, SCP, SFTP, SMB, SMBS,
       SMTP, SMTPS, TELNET and TFTP). The command is designed to work  without
       user interaction.

       curl offers a busload of useful tricks like proxy support, user authen-
       tication, FTP upload, HTTP post, SSL connections, cookies, file  trans-
       fer  resume,  Metalink,  and more. As you will see below, the number of
       features will make your head spin!

       curl is powered by  libcurl  for  all  transfer-related  features.  See
       libcurl(3) for details.

URL
       The  URL  syntax is protocol-dependent. You'll find a detailed descrip-
       tion in RFC 3986.

       You can specify multiple URLs or parts of URLs  by  writing  part  sets
       within braces as in:

         http://site.{one,two,three}.com

       or you can get sequences of alphanumeric series by using [] as in:

         ftp://ftp.example.com/file[1-100].txt

         ftp://ftp.example.com/file[001-100].txt    (with leading zeros)

         ftp://ftp.example.com/file[a-z].txt

       Nested  sequences  are not supported, but you can use several ones next
       to each other:

         http://example.com/archive[1996-1999]/vol[1-4]/part{a,b,c}.html

       You can specify any amount of URLs on the command line.  They  will  be
       fetched  in a sequential manner in the specified order. You can specify
       command line options and URLs mixed and in any  order  on  the  command
       line.

       You  can  specify a step counter for the ranges to get every Nth number
       or letter:

         http://example.com/file[1-100:10].txt

         http://example.com/file[a-z:2].txt

       When using [] or {} sequences when invoked from a command line  prompt,
       you probably have to put the full URL within double quotes to avoid the
       shell from interfering with it. This also  goes  for  other  characters
       treated special, like for example '&', '?' and '*'.

       Provide  the IPv6 zone index in the URL with an escaped percentage sign
       and the interface name. Like in

         http://[fe80::3%25eth0]/

       If you specify URL without protocol:// prefix,  curl  will  attempt  to
       guess  what  protocol  you might want. It will then default to HTTP but
       try other protocols based on often-used host name prefixes.  For  exam-
       ple,  for  host names starting with "ftp." curl will assume you want to
       speak FTP.

       curl will do its best to use what you pass to it as a URL.  It  is  not
       trying  to  validate it as a syntactically correct URL by any means but
       is instead very liberal with what it accepts.

       curl will attempt to re-use connections for multiple file transfers, so
       that  getting many files from the same server will not do multiple con-
       nects / handshakes. This improves speed. Of course this is only done on
       files  specified  on  a  single command line and cannot be used between
       separate curl invokes.

PROGRESS METER
       curl normally displays a progress meter during  operations,  indicating
       the  amount  of  transferred  data,  transfer speeds and estimated time
       left, etc. The progress meter displays number of bytes and  the  speeds
       are  in  bytes per second. The suffixes (k, M, G, T, P) are 1024 based.
       For example 1k is 1024 bytes. 1M is 1048576 bytes.

       curl displays this data to the terminal by default, so  if  you  invoke
       curl  to do an operation and it is about to write data to the terminal,
       it disables the progress meter as otherwise it would mess up the output
       mixing progress meter and response data.

       If you want a progress meter for HTTP POST or PUT requests, you need to
       redirect the response output to a file, using shell redirect  (>),  -o,
       --output or similar.

       It  is not the same case for FTP upload as that operation does not spit
       out any response data to the terminal.

       If you prefer a progress  "bar"  instead  of  the  regular  meter,  -#,
       --progress-bar  is your friend. You can also disable the progress meter
       completely with the -s, --silent option.

OPTIONS
       Options start with one or two dashes. Many of the  options  require  an
       additional value next to them.

       The  short  "single-dash"  form  of the options, -d for example, may be
       used with or without a space between it and its value, although a space
       is a recommended separator. The long "double-dash" form, -d, --data for
       example, requires a space between it and its value.

       Short version options that don't need any additional values can be used
       immediately  next  to  each other, like for example you can specify all
       the options -O, -L and -v at once as -OLv.

       In general, all boolean options are enabled with --option and yet again
       disabled  with --no-option. That is, you use the exact same option name
       but prefix it with "no-". However, in this list we mostly only list and
       show  the --option version of them. (This concept with --no options was
       added in 7.19.0. Previously most options were  toggled  on/off  on  re-
       peated use of the same command line option.)

       --abstract-unix-socket <path>
              (HTTP)  Connect  through an abstract Unix domain socket, instead
              of using the network.  Note: netstat shows the path  of  an  ab-
              stract  socket  prefixed  with  '@', however the <path> argument
              should not have this leading character.

              Added in 7.53.0.

       --alt-svc <file name>
              (HTTPS) WARNING: this option is experiemental.  Do  not  use  in
              production.

              This option enables the alt-svc parser in curl. If the file name
              points to an existing alt-svc cache file, that will be used. Af-
              ter  a  completed  transfer, the cache will be saved to the file
              name again if it has been modified.

              Specifiy a "" file name (zero length)  to  avoid  loading/saving
              and make curl just handle the cache in memory.

              If  this  option  is used several times, curl will load contents
              from all the files but the the last one will be used for saving.

              Added in 7.64.1.

       --anyauth
              (HTTP) Tells curl to figure out authentication method by itself,
              and  use  the most secure one the remote site claims to support.
              This is done by first doing a request and checking the response-
              headers,  thus  possibly  inducing  an extra network round-trip.
              This is  used  instead  of  setting  a  specific  authentication
              method,  which  you  can  do with --basic, --digest, --ntlm, and
              --negotiate.

              Using --anyauth is not recommended if you do uploads from stdin,
              since  it  may require data to be sent twice and then the client
              must be able to rewind. If the need should arise when  uploading
              from stdin, the upload operation will fail.

              Used together with -u, --user.

              See also --proxy-anyauth and --basic and --digest.

       -a, --append
              (FTP SFTP) When used in an upload, this makes curl append to the
              target file instead  of  overwriting  it.  If  the  remote  file
              doesn't  exist,  it will be created.  Note that this flag is ig-
              nored by some SFTP servers (including OpenSSH).

       --basic
              (HTTP) Tells curl to use HTTP Basic authentication with the  re-
              mote host. This is the default and this option is usually point-
              less, unless you use it to override a previously set option that
              sets  a  different  authentication method (such as --ntlm, --di-
              gest, or --negotiate).

              Used together with -u, --user.

              See also --proxy-basic.

       --cacert <file>
              (TLS) Tells curl to use the specified certificate file to verify
              the  peer.  The  file  may contain multiple CA certificates. The
              certificate(s) must be in PEM format. Normally curl is built  to
              use a default file for this, so this option is typically used to
              alter that default file.

              curl recognizes the environment variable named  'CURL_CA_BUNDLE'
              if  it  is  set,  and uses the given path as a path to a CA cert
              bundle. This option overrides that variable.

              The windows version of curl will automatically  look  for  a  CA
              certs file named 'curl-ca-bundle.crt', either in the same direc-
              tory as curl.exe, or in the Current Working Directory, or in any
              folder along your PATH.

              If  curl  is  built  against  the  NSS  SSL library, the NSS PEM
              PKCS#11 module (libnsspem.so) needs to be available for this op-
              tion to work properly.

              (iOS  and macOS only) If curl is built against Secure Transport,
              then this option is supported for  backward  compatibility  with
              other  SSL  engines,  but it should not be set. If the option is
              not set, then curl will use the certificates in the  system  and
              user  Keychain to verify the peer, which is the preferred method
              of verifying the peer's certificate chain.

              (Schannel only) This option is supported for Schannel in Windows
              7  or later with libcurl 7.60 or later. This option is supported
              for backward compatibility with other SSL engines; instead it is
              recommended  to use Windows' store of root certificates (the de-
              fault for Schannel).

              If this option is used several times, the last one will be used.

       --capath <dir>
              (TLS) Tells curl to use the specified certificate  directory  to
              verify  the  peer.  Multiple paths can be provided by separating
              them with ":" (e.g.  "path1:path2:path3"). The certificates must
              be  in PEM format, and if curl is built against OpenSSL, the di-
              rectory must have been processed using the c_rehash utility sup-
              plied  with  OpenSSL.  Using  --capath can allow OpenSSL-powered
              curl to make SSL-connections much more  efficiently  than  using
              --cacert if the --cacert file contains many CA certificates.

              If this option is set, the default capath value will be ignored,
              and if it is used several times, the last one will be used.

       --cert-status
              (TLS) Tells curl to verify the status of the server  certificate
              by using the Certificate Status Request (aka. OCSP stapling) TLS
              extension.

              If this option is enabled and the server sends an invalid  (e.g.
              expired) response, if the response suggests that the server cer-
              tificate has been revoked, or no response at  all  is  received,
              the verification fails.

              This  is  currently  only implemented in the OpenSSL, GnuTLS and
              NSS backends.

              Added in 7.41.0.

       --cert-type <type>
              (TLS) Tells curl what type the provided  client  certificate  is
              using. PEM, DER, ENG and P12 are recognized types.  If not spec-
              ified, PEM is assumed.

              If this option is used several times, the last one will be used.

              See also -E, --cert and --key and --key-type.

       -E, --cert <certificate[:password]>
              (TLS) Tells curl to use the specified  client  certificate  file
              when getting a file with HTTPS, FTPS or another SSL-based proto-
              col. The certificate must be in PKCS#12 format if  using  Secure
              Transport,  or PEM format if using any other engine.  If the op-
              tional password isn't specified, it will be queried for  on  the
              terminal.  Note  that  this  option assumes a "certificate" file
              that is the private key and the client certificate concatenated!
              See -E, --cert and --key to specify them independently.

              If  curl  is  built against the NSS SSL library then this option
              can tell curl the nickname of the certificate to use within  the
              NSS  database defined by the environment variable SSL_DIR (or by
              default /etc/pki/nssdb). If the NSS  PEM  PKCS#11  module  (lib-
              nsspem.so)  is  available  then  PEM files may be loaded. If you
              want to use a file from the current directory, please precede it
              with  "./"  prefix, in order to avoid confusion with a nickname.
              If the nickname contains ":", it needs to be preceded by "\"  so
              that  it  is not recognized as password delimiter.  If the nick-
              name contains "\", it needs to be escaped as "\\" so that it  is
              not recognized as an escape character.

              If  curl is built against OpenSSL library, and the engine pkcs11
              is available, then a PKCS#11 URI (RFC 7512) can be used to spec-
              ify  a  certificate located in a PKCS#11 device. A string begin-
              ning with "pkcs11:" will be interpreted as a PKCS#11 URI.  If  a
              PKCS#11 URI is provided, then the --engine option will be set as
              "pkcs11" if none was provided and the --cert-type option will be
              set as "ENG" if none was provided.

              (iOS  and macOS only) If curl is built against Secure Transport,
              then the certificate string can either be the name of a certifi-
              cate/private  key in the system or user keychain, or the path to
              a PKCS#12-encoded certificate and private key. If  you  want  to
              use  a  file  from the current directory, please precede it with
              "./" prefix, in order to avoid confusion with a nickname.

              (Schannel only) Client certificates must be specified by a  path
              expression  to  a  certificate  store.  (Loading PFX is not sup-
              ported; you can import it to a store first). You can use "<store
              location>\<store  name>\<thumbprint>"  to refer to a certificate
              in  the  system  certificates  store,  for   example,   "Curren-
              tUser\MY\934a7ac6f8a5d579285a74fa61e19f23ddfe8d7a".   Thumbprint
              is usually a SHA-1 hex string which you can see  in  certificate
              details.  Following  store locations are supported: CurrentUser,
              LocalMachine, CurrentService, Services,  CurrentUserGroupPolicy,
              LocalMachineGroupPolicy, LocalMachineEnterprise.

              If this option is used several times, the last one will be used.

              See also --cert-type and --key and --key-type.

       --ciphers <list of ciphers>
              (TLS) Specifies which ciphers to use in the connection. The list
              of ciphers must specify valid ciphers. Read  up  on  SSL  cipher
              list details on this URL:

               https://curl.haxx.se/docs/ssl-ciphers.html

              If this option is used several times, the last one will be used.

       --compressed-ssh
              (SCP SFTP) Enables built-in SSH compression.  This is a request,
              not an order; the server may or may not do it.

              Added in 7.56.0.

       --compressed
              (HTTP) Request a compressed response using one of the algorithms
              curl  supports, and save the uncompressed document.  If this op-
              tion is used and the server sends an unsupported encoding,  curl
              will report an error.

       -K, --config <file>

              Specify  a  text  file  to read curl arguments from. The command
              line arguments found in the text file will be used  as  if  they
              were provided on the command line.

              Options  and their parameters must be specified on the same line
              in the file, separated by whitespace, colon, or the equals sign.
              Long  option  names  can  optionally be given in the config file
              without the initial double dashes and if so, the colon or equals
              characters can be used as separators. If the option is specified
              with one or two dashes, there can be no colon or equals  charac-
              ter between the option and its parameter.

              If the parameter is to contain whitespace, the parameter must be
              enclosed within quotes. Within double quotes, the following  es-
              cape sequences are available: \\, \", \t, \n, \r and \v. A back-
              slash preceding any other letter is ignored. If the first column
              of  a  config line is a '#' character, the rest of the line will
              be treated as a comment. Only write one option per physical line
              in the config file.

              Specify  the  filename  to -K, --config as '-' to make curl read
              the file from stdin.

              Note that to be able to specify a URL in the  config  file,  you
              need  to  specify  it  using the --url option, and not by simply
              writing the URL on its own line. So, it could  look  similar  to
              this:

              url = "https://curl.haxx.se/docs/"

              When  curl  is invoked, it (unless -q, --disable is used) checks
              for a default config file and uses it if found. The default con-
              fig file is checked for in the following places in this order:

              1)  curl  tries  to find the "home dir": It first checks for the
              CURL_HOME and then the HOME environment variables. Failing that,
              it  uses getpwuid() on Unix-like systems (which returns the home
              dir given the current user in your system). On Windows, it  then
              checks for the APPDATA variable, or as a last resort the '%USER-
              PROFILE%\Application Data'.

              2) On windows, if there is no _curlrc file in the home  dir,  it
              checks for one in the same dir the curl executable is placed. On
              Unix-like systems, it will simply try to load .curlrc  from  the
              determined home dir.

              # --- Example file ---
              # this is a comment
              url = "example.com"
              output = "curlhere.html"
              user-agent = "superagent/1.0"

              # and fetch another URL too
              url = "example.com/docs/manpage.html"
              -O
              referer = "http://nowhereatall.example.com/"
              # --- End of example file ---

              This  option  can be used multiple times to load multiple config
              files.

       --connect-timeout <seconds>
              Maximum time in seconds that  you  allow  curl's  connection  to
              take.   This  only  limits the connection phase, so if curl con-
              nects within the given period it will continue - if not it  will
              exit.  Since version 7.32.0, this option accepts decimal values.
              If this option is used several times, the last one will be used.

              See also -m, --max-time.

       --connect-to <HOST1:PORT1:HOST2:PORT2>

              For  a  request  to  the  given  HOST1:PORT1  pair,  connect  to
              HOST2:PORT2 instead.  This option is suitable to direct requests
              at a specific server, e.g. at a specific cluster node in a clus-
              ter of servers. This option is only used to establish  the  net-
              work  connection.  It  does NOT affect the hostname/port that is
              used for TLS/SSL (e.g. SNI, certificate verification) or for the
              application  protocols.  "HOST1"  and  "PORT1"  may be the empty
              string, meaning "any host/port". "HOST2" and "PORT2" may also be
              the   empty   string,   meaning   "use  the  request's  original
              host/port".

              A "host" specified to this option is compared as a string, so it
              needs  to  match  the name used in request URL. It can be either
              numerical such as "127.0.0.1" or the full host name such as "ex-
              ample.org".

              This option can be used many times to add many connect rules.

              See also --resolve and -H, --header. Added in 7.49.0.
       -C, --continue-at <offset>
              Continue/Resume  a  previous  file transfer at the given offset.
              The given offset is the exact  number  of  bytes  that  will  be
              skipped,  counting  from the beginning of the source file before
              it is transferred to the destination.  If used with uploads, the
              FTP server command SIZE will not be used by curl.

              Use  "-C  -" to tell curl to automatically find out where/how to
              resume the transfer. It then uses the given  output/input  files
              to figure that out.

              If this option is used several times, the last one will be used.

              See also -r, --range.

       -c, --cookie-jar <filename>
              (HTTP)  Specify to which file you want curl to write all cookies
              after a completed operation. Curl writes all  cookies  from  its
              in-memory  cookie storage to the given file at the end of opera-
              tions. If no cookies are known, no data  will  be  written.  The
              file  will  be written using the Netscape cookie file format. If
              you set the file name to a single dash, "-", the cookies will be
              written to stdout.

              This  command  line  option will activate the cookie engine that
              makes curl record and use cookies. Another way to activate it is
              to use the -b, --cookie option.

              If the cookie jar can't be created or written to, the whole curl
              operation won't fail or even report an error clearly. Using  -v,
              --verbose  will  get  a  warning displayed, but that is the only
              visible feedback you get about this possibly lethal situation.

              If this option is used several times, the  last  specified  file
              name will be used.

       -b, --cookie <data|filename>
              (HTTP) Pass the data to the HTTP server in the Cookie header. It
              is supposedly the data previously received from the server in  a
              "Set-Cookie:"   line.    The   data  should  be  in  the  format
              "NAME1=VALUE1; NAME2=VALUE2".

              If no '=' symbol is used in the argument, it is instead  treated
              as a filename to read previously stored cookie from. This option
              also activates the cookie engine which will make curl record in-
              coming  cookies, which may be handy if you're using this in com-
              bination with the -L,  --location  option  or  do  multiple  URL
              transfers  on the same invoke. If the file name is exactly a mi-
              nus ("-"), curl will instead the contents from stdin.
              The file format of the file to read cookies from should be plain
              HTTP  headers  (Set-Cookie style) or the Netscape/Mozilla cookie
              file format.

              The file specified with -b, --cookie is only used as  input.  No
              cookies  will  be written to the file. To store cookies, use the
              -c, --cookie-jar option.

              Exercise caution if you  are  using  this  option  and  multiple
              transfers may occur.  If you use the NAME1=VALUE1; format, or in
              a file use the Set-Cookie format and  don't  specify  a  domain,
              then the cookie is sent for any domain (even after redirects are
              followed) and cannot be modified by a server-set cookie. If  the
              cookie  engine is enabled and a server sets a cookie of the same
              name then both will be sent on a future transfer to that server,
              likely not what you intended.  To address these issues set a do-
              main in Set-Cookie (doing that will include sub domains) or  use
              the Netscape format.

              If this option is used several times, the last one will be used.
              Users very often want to both read cookies from a file and write
              updated cookies back to a file, so using both -b,  --cookie  and
              -c, --cookie-jar in the same command line is common.

       --create-dirs
              When used in conjunction with the -o, --output option, curl will
              create the necessary local directory hierarchy as  needed.  This
              option  creates the dirs mentioned with the -o, --output option,
              nothing else. If the --output file name uses no dir  or  if  the
              dirs it mentions already exist, no dir will be created.

              To  create remote directories when using FTP or SFTP, try --ftp-
              create-dirs.

       --crlf (FTP SMTP)  Convert  LF  to  CRLF  in  upload.  Useful  for  MVS
              (OS/390).

              (SMTP added in 7.40.0)

       --crlfile <file>
              (TLS) Provide a file using PEM format with a Certificate Revoca-
              tion List that may specify peer certificates that are to be con-
              sidered revoked.

              If this option is used several times, the last one will be used.

              Added in 7.19.7.

       --data-ascii <data>
              (HTTP) This is just an alias for -d, --data.

       --data-binary <data>
              (HTTP)  This  posts data exactly as specified with no extra pro-
              cessing whatsoever.

              If you start the data with the letter @, the rest  should  be  a
              filename.   Data  is  posted  in  a similar manner as -d, --data
              does, except that newlines and carriage  returns  are  preserved
              and conversions are never done.

              Like  -d,  --data the default content-type sent to the server is
              application/x-www-form-urlencoded. If you want the  data  to  be
              treated as arbitrary binary data by the server then set the con-
              tent-type to octet-stream: -H "Content-Type:  application/octet-
              stream".

              If  this  option  is  used several times, the ones following the
              first will append data as described in -d, --data.

       --data-raw <data>
              (HTTP) This posts data similarly to -d, --data but  without  the
              special interpretation of the @ character.

              See also -d, --data. Added in 7.43.0.

       --data-urlencode <data>
              (HTTP)  This posts data, similar to the other -d, --data options
              with the exception that this performs URL-encoding.

              To be CGI-compliant, the <data> part should begin  with  a  name
              followed  by a separator and a content specification. The <data>
              part can be passed to curl using one of the following syntaxes:

              content
                     This will make curl URL-encode the content and pass  that
                     on.  Just  be careful so that the content doesn't contain
                     any = or @ symbols, as that will  then  make  the  syntax
                     match one of the other cases below!

              =content
                     This  will make curl URL-encode the content and pass that
                     on. The preceding = symbol is not included in the data.

              name=content
                     This will make curl URL-encode the content part and  pass
                     that  on.  Note that the name part is expected to be URL-
                     encoded already.

              @filename
                     This will make curl load data from the  given  file  (in-
                     cluding  any  newlines), URL-encode that data and pass it
                     on in the POST.

              name@filename
                     This will make curl load data from the  given  file  (in-
                     cluding  any  newlines), URL-encode that data and pass it
                     on in the POST. The name part  gets  an  equal  sign  ap-
                     pended,  resulting  in name=urlencoded-file-content. Note
                     that the name is expected to be URL-encoded already.
       See also -d, --data and --data-raw. Added in 7.18.0.

       -d, --data <data>
              (HTTP) Sends the specified data in a POST request  to  the  HTTP
              server,  in  the  same  way  that a browser does when a user has
              filled in an HTML form and presses the submit button. This  will
              cause curl to pass the data to the server using the content-type
              application/x-www-form-urlencoded.  Compare to -F, --form.

              --data-raw is almost the same but does not have a special inter-
              pretation  of  the  @ character. To post data purely binary, you
              should instead use the --data-binary option.  To URL-encode  the
              value of a form field you may use --data-urlencode.

              If  any of these options is used more than once on the same com-
              mand line, the data pieces specified  will  be  merged  together
              with  a  separating  &-symbol.  Thus,  using  '-d name=daniel -d
              skill=lousy'  would  generate  a  post  chunk  that  looks  like
              'name=daniel&skill=lousy'.

              If  you  start  the data with the letter @, the rest should be a
              file name to read the data from, or - if you want curl  to  read
              the data from stdin. Multiple files can also be specified. Post-
              ing data from a file named from a file like that,  carriage  re-
              turns and newlines will be stripped out. If you don't want the @
              character to have a special interpretation  use  --data-raw  in-
              stead.

              See also --data-binary and --data-urlencode and --data-raw. This
              option overrides -F, --form and -I,  --head  and  -T,  --upload-
              file.

       --delegation <LEVEL>
              (GSS/kerberos)  Set  LEVEL to tell the server what it is allowed
              to delegate when it comes to user credentials.

              none   Don't allow any delegation.

              policy Delegates if and only if the OK-AS-DELEGATE flag  is  set
                     in  the  Kerberos  service  ticket,  which is a matter of
                     realm policy.

              always Unconditionally allow the server to delegate.

       --digest
              (HTTP) Enables HTTP Digest authentication. This is an  authenti-
              cation  scheme  that  prevents the password from being sent over
              the wire in clear text. Use this in combination with the  normal
              -u, --user option to set user name and password.

              If  this  option  is  used  several times, only the first one is
              used.

              See also -u, --user and --proxy-digest and --anyauth.  This  op-
              tion overrides --basic and --ntlm and --negotiate.

       --disable-eprt
              (FTP) Tell curl to disable the use of the EPRT and LPRT commands
              when doing active FTP transfers. Curl will normally always first
              attempt  to use EPRT, then LPRT before using PORT, but with this
              option, it will use PORT right away. EPRT and  LPRT  are  exten-
              sions  to  the  original  FTP  protocol, and may not work on all
              servers, but they enable more functionality in a better way than
              the traditional PORT command.

              --eprt can be used to explicitly enable EPRT again and --no-eprt
              is an alias for --disable-eprt.

              If the server is accessed using IPv6, this option will  have  no
              effect as EPRT is necessary then.

              Disabling  EPRT only changes the active behavior. If you want to
              switch to passive mode you need to not  use  -P,  --ftp-port  or
              force it with --ftp-pasv.

       --disable-epsv
              (FTP)  (FTP)  Tell  curl  to disable the use of the EPSV command
              when doing passive FTP  transfers.  Curl  will  normally  always
              first  attempt to use EPSV before PASV, but with this option, it
              will not try using EPSV.

              --epsv can be used to explicitly enable EPSV again and --no-epsv
              is an alias for --disable-epsv.

              If  the  server is an IPv6 host, this option will have no effect
              as EPSV is necessary then.

              Disabling EPSV only changes the passive behavior. If you want to
              switch to active mode you need to use -P, --ftp-port.
       -q, --disable
              If  used  as the first parameter on the command line, the curlrc
              config file will not be read and used. See the -K, --config  for
              details on the default config file search path.

       --disallow-username-in-url
              (HTTP)  This  tells  curl  to  exit if passed a url containing a
              username.

              See also --proto. Added in 7.61.0.

       --dns-interface <interface>
              (DNS) Tell curl to send outgoing DNS  requests  through  <inter-
              face>.  This  option is a counterpart to --interface (which does
              not affect DNS). The supplied string must be an  interface  name
              (not an address).

              See  also  --dns-ipv4-addr  and --dns-ipv6-addr. --dns-interface
              requires that the underlying libcurl was  built  to  support  c-
              ares. Added in 7.33.0.

       --dns-ipv4-addr <address>
              (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS re-
              quests, so that the DNS requests originate  from  this  address.
              The argument should be a single IPv4 address.

              See  also  --dns-interface  and --dns-ipv6-addr. --dns-ipv4-addr
              requires that the underlying libcurl was  built  to  support  c-
              ares. Added in 7.33.0.

       --dns-ipv6-addr <address>
              (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS re-
              quests, so that the DNS requests originate  from  this  address.
              The argument should be a single IPv6 address.

              See  also  --dns-interface  and --dns-ipv4-addr. --dns-ipv6-addr
              requires that the underlying libcurl was  built  to  support  c-
              ares. Added in 7.33.0.

       --dns-servers <addresses>
              Set the list of DNS servers to be used instead of the system de-
              fault.  The list of IP addresses should be separated  with  com-
              mas. Port numbers may also optionally be given as :<port-number>
              after each IP address.

              --dns-servers requires that the underlying libcurl was built  to
              support c-ares. Added in 7.33.0.

       --doh-url <URL>
              (all)  Specifies which DNS-over-HTTPS (DOH) server to use to re-
              solve hostnames, instead of  using  the  default  name  resolver
              mechanism. The URL must be HTTPS.

              If this option is used several times, the last one will be used.

       -D, --dump-header <filename>
              (HTTP  FTP) Write the received protocol headers to the specified
              file.

              This option is handy to use when you want to store  the  headers
              that  an  HTTP site sends to you. Cookies from the headers could
              then be read in a  second  curl  invocation  by  using  the  -b,
              --cookie  option! The -c, --cookie-jar option is a better way to
              store cookies.

              When used in FTP, the FTP server response lines  are  considered
              being "headers" and thus are saved there.

              If this option is used several times, the last one will be used.

              See also -o, --output.

       --egd-file <file>
              (TLS)  Specify  the  path  name  to the Entropy Gathering Daemon
              socket. The socket is used to seed the  random  engine  for  SSL
              connections.

              See also --random-file.

       --engine <name>
              (TLS)  Select the OpenSSL crypto engine to use for cipher opera-
              tions. Use --engine list to print a list of build-time supported
              engines.  Note  that  not  all  (or  none) of the engines may be
              available at run-time.

       --expect100-timeout <seconds>
              (HTTP) Maximum time in seconds that you allow curl to wait for a
              100-continue  response  when curl emits an Expects: 100-continue
              header in its request. By default curl  will  wait  one  second.
              This  option accepts decimal values! When curl stops waiting, it
              will continue as if the response has been received.

              See also --connect-timeout. Added in 7.47.0.

       --fail-early
              Fail and exit on the first detected transfer error.

              When curl is used to do multiple transfers on the command  line,
              it will attempt to operate on each given URL, one by one. By de-
              fault, it will ignore errors if there are more  URLs  given  and
              the  last  URL's  success will determine the error code curl re-
              turns. So early failures will be "hidden" by subsequent success-
              ful transfers.

              Using  this  option,  curl  will  instead return an error on the
              first transfer that fails, independent of  the  amount  of  URLs
              that  are given on the command line. This way, no transfer fail-
              ures go undetected by scripts and similar.

              This option is global and does not need to be specified for each
              use of -:, --next.

              This option does not imply -f, --fail, which causes transfers to
              fail due to the server's HTTP status code. You can  combine  the
              two options, however note -f, --fail is not global and is there-
              fore contained by -:, --next.

              Added in 7.52.0.

       -f, --fail
              (HTTP) Fail silently (no output at all) on server  errors.  This
              is  mostly done to better enable scripts etc to better deal with
              failed attempts. In normal cases when an HTTP  server  fails  to
              deliver  a  document,  it  returns  an  HTML document stating so
              (which often also describes why and more). This flag  will  pre-
              vent curl from outputting that and return error 22.

              This  method is not fail-safe and there are occasions where non-
              successful response codes will slip through, especially when au-
              thentication is involved (response codes 401 and 407).

       --false-start
              (TLS)  Tells  curl  to use false start during the TLS handshake.
              False start is a mode where a TLS client will start sending  ap-
              plication  data  before verifying the server's Finished message,
              thus saving a round trip when performing a full handshake.

              This is currently only implemented in the NSS and Secure  Trans-
              port (on iOS 7.0 or later, or OS X 10.9 or later) backends.

              Added in 7.42.0.

       --form-string <name=string>
              (HTTP  SMTP  IMAP)  Similar  to -F, --form except that the value
              string for the named parameter is used  literally.  Leading  '@'
              and '<' characters, and the ';type=' string in the value have no
              special meaning. Use this in preference to -F, --form if there's
              any  possibility  that the string value may accidentally trigger
              the '@' or '<' features of -F, --form.

              See also -F, --form.

       -F, --form <name=content>
              (HTTP SMTP IMAP) For HTTP protocol family, this lets  curl  emu-
              late  a  filled-in  form  in which a user has pressed the submit
              button. This causes curl to POST  data  using  the  Content-Type
              multipart/form-data according to RFC 2388.

              For  SMTP and IMAP protocols, this is the mean to compose a mul-
              tipart mail message to transmit.

              This enables uploading of binary files etc. To force  the  'con-
              tent' part to be a file, prefix the file name with an @ sign. To
              just get the content part from a file, prefix the file name with
              the  symbol  <.  The  difference  between @ and < is then that @
              makes a file get attached in the post as a  file  upload,  while
              the < makes a text field and just get the contents for that text
              field from a file.

              Tell curl to read content from stdin instead of a file by  using
              - as filename. This goes for both @ and < constructs. When stdin
              is used, the contents is buffered in memory first by curl to de-
              termine its size and allow a possible resend.  Defining a part's
              data from a named non-regular file (such as a named pipe or sim-
              ilar)  is unfortunately not subject to buffering and will be ef-
              fectively read at transmission time; since the full size is  un-
              known before the transfer starts, such data is sent as chunks by
              HTTP and rejected by IMAP.

              Example: send an image to an HTTP server, where 'profile' is the
              name  of  the  form-field to which the file portrait.jpg will be
              the input:

               curl -F profile=@portrait.jpg https://example.com/upload.cgi

              Example: send a your name and shoe size in two  text  fields  to
              the server:

               curl -F name=John -F shoesize=11 https://example.com/

              Example:  send  a your essay in a text field to the server. Send
              it as a plain text field, but get the contents for it from a lo-
              cal file:

               curl -F "story=<hugefile.txt" https://example.com/

              You  can  also  tell  curl  what  Content-Type  to  use by using
              'type=', in a manner similar to:

               curl -F "web=@index.html;type=text/html" example.com
              or

               curl -F "name=daniel;type=text/foo" example.com

              You can also explicitly change the name field of a  file  upload
              part by setting filename=, like this:

               curl -F "file=@localfile;filename=nameinpost" example.com

              If  filename/path contains ',' or ';', it must be quoted by dou-
              ble-quotes like:

               curl  -F  "file=@\"localfile\";filename=\"nameinpost\""   exam-
              ple.com

              or

               curl -F 'file=@"localfile";filename="nameinpost"' example.com

              Note  that  if  a  filename/path is quoted by double-quotes, any
              double-quote or backslash within the filename must be escaped by
              backslash.

              Quoting  must  also  be  applied to non-file data if it contains
              semicolons, leading/trailing spaces or leading double quotes:

               curl -F  'colors="red;  green;  blue";type=text/x-myapp'  exam-
              ple.com

              You  can  add  custom  headers to the field by setting headers=,
              like

                curl -F "submit=OK;headers=\"X-submit-type: OK\"" example.com

              or

                curl -F "submit=OK;headers=@headerfile" example.com
              The headers= keyword may appear more that once and  above  notes
              about  quoting  apply.  When headers are read from a file, Empty
              lines and lines starting with '#' are comments and ignored; each
              header can be folded by splitting between two words and starting
              the continuation line with a  space;  embedded  carriage-returns
              and  trailing  spaces  are  stripped.   Here  is an example of a
              header file contents:

                # This file contain two headers.
                X-header-1: this is a header

                # The following header is folded.
                X-header-2: this is
                 another header

              To support sending multipart mail messages, the  syntax  is  ex-
              tended as follows:
              -  name can be omitted: the equal sign is the first character of
              the argument,
              - if data starts with '(', this signals to start  a  new  multi-
              part: it can be followed by a content type specification.
              - a multipart can be terminated with a '=)' argument.
              Example:  the  following  command sends an SMTP mime e-mail con-
              sisting in an inline part in two alternative formats: plain text
              and HTML. It attaches a text file:

               curl -F '=(;type=multipart/alternative' \
                       -F '=plain text message' \
                       -F '= <body>HTML message</body>;type=text/html' \
                    -F '=)' -F '=@textfile.txt' ...  smtp://example.com

              Data  can  be encoded for transfer using encoder=. Available en-
              codings are binary and 8bit that do nothing else than adding the
              corresponding  Content-Transfer-Encoding  header, 7bit that only
              rejects 8-bit characters with a transfer error, quoted-printable
              and  base64  that  encodes  data  according to the corresponding
              schemes, limiting lines length to 76 characters.

              Example: send multipart mail with a quoted-printable  text  mes-
              sage and a base64 attached file:

               curl -F '=text message;encoder=quoted-printable' \
                    -F '=@localfile;encoder=base64' ... smtp://example.com

              See further examples and details in the MANUAL.

              This option can be used multiple times.

              This  option  overrides  -d, --data and -I, --head and -T, --up-
              load-file.

       --ftp-account <data>
              (FTP) When an FTP server asks for "account data" after user name
              and  password has been provided, this data is sent off using the
              ACCT command.

              If this option is used several times, the last one will be used.

              Added in 7.13.0.

       --ftp-alternative-to-user <command>
              (FTP) If authenticating with the USER and PASS  commands  fails,
              send  this  command.   When  connecting  to  Tumbleweed's Secure
              Transport server over FTPS using  a  client  certificate,  using
              "SITE  AUTH"  will tell the server to retrieve the username from
              the certificate.
              Added in 7.15.5.

       --ftp-create-dirs
              (FTP SFTP) When an FTP or SFTP URL/operation uses  a  path  that
              doesn't  currently exist on the server, the standard behavior of
              curl is to fail. Using this option, curl will instead attempt to
              create missing directories.

              See also --create-dirs.

       --ftp-method <method>
              (FTP)  Control what method curl should use to reach a file on an
              FTP(S) server. The method argument should be one of the  follow-
              ing alternatives:

              multicwd
                     curl  does  a  single CWD operation for each path part in
                     the given URL. For deep hierarchies this means very  many
                     commands.  This  is  how RFC 1738 says it should be done.
                     This is the default but the slowest behavior.

              nocwd  curl does no CWD at all. curl will do  SIZE,  RETR,  STOR
                     etc and give a full path to the server for all these com-
                     mands. This is the fastest behavior.

              singlecwd
                     curl does one CWD with the full target directory and then
                     operates  on  the  file  "normally" (like in the multicwd
                     case). This is somewhat  more  standards  compliant  than
                     'nocwd' but without the full penalty of 'multicwd'.

       Added in 7.15.1.

       --ftp-pasv
              (FTP)  Use  passive mode for the data connection. Passive is the
              internal default behavior, but using this option can be used  to
              override a previous -P, --ftp-port option.

              If  this  option  is  used  several times, only the first one is
              used. Undoing an enforced passive really isn't  doable  but  you
              must then instead enforce the correct -P, --ftp-port again.

              Passive mode means that curl will try the EPSV command first and
              then PASV, unless --disable-epsv is used.
              See also --disable-epsv. Added in 7.11.0.

       -P, --ftp-port <address>
              (FTP) Reverses the default initiator/listener  roles  when  con-
              necting  with  FTP. This option makes curl use active mode. curl
              then tells the server to connect back to the client's  specified
              address and port, while passive mode asks the server to setup an
              IP address and port for it to connect to.  <address>  should  be
              one of:

              interface
                     e.g.  "eth0"  to specify which interface's IP address you
                     want to use (Unix only)

              IP address
                     e.g. "192.168.10.1" to specify the exact IP address

              host name
                     e.g. "my.host.domain" to specify the machine

              -      make curl pick the same IP address that is  already  used
                     for the control connection

       If  this  option is used several times, the last one will be used. Dis-
       able the use of PORT with --ftp-pasv. Disable the attempt  to  use  the
       EPRT  command  instead  of PORT by using --disable-eprt. EPRT is really
       PORT++.

       Since 7.19.5, you can append ":[start]-[end]" to the right of  the  ad-
       dress,  to tell curl what TCP port range to use. That means you specify
       a port range, from a lower to a higher number. A single number works as
       well,  but do note that it increases the risk of failure since the port
       may not be available.

       See also --ftp-pasv and --disable-eprt.

       --ftp-pret
              (FTP) Tell curl to send a PRET command before PASV  (and  EPSV).
              Certain  FTP  servers,  mainly drftpd, require this non-standard
              command for directory listings as well as up  and  downloads  in
              PASV mode.

              Added in 7.20.0.

       --ftp-skip-pasv-ip
              (FTP) Tell curl to not use the IP address the server suggests in
              its response to curl's PASV command when curl connects the  data
              connection.  Instead curl will re-use the same IP address it al-
              ready uses for the control connection.

              This option has no effect if PORT, EPRT or EPSV is used  instead
              of PASV.

              See also --ftp-pasv. Added in 7.14.2.

       --ftp-ssl-ccc-mode <active/passive>
              (FTP)  Sets the CCC mode. The passive mode will not initiate the
              shutdown, but instead wait for the server to do it, and will not
              reply to the shutdown from the server. The active mode initiates
              the shutdown and waits for a reply from the server.

              See also --ftp-ssl-ccc. Added in 7.16.2.

       --ftp-ssl-ccc
              (FTP) Use CCC (Clear Command Channel)  Shuts  down  the  SSL/TLS
              layer after authenticating. The rest of the control channel com-
              munication will be unencrypted. This allows NAT routers to  fol-
              low the FTP transaction. The default mode is passive.
              See also --ssl and --ftp-ssl-ccc-mode. Added in 7.16.1.

       --ftp-ssl-control
              (FTP)  Require  SSL/TLS  for  the FTP login, clear for transfer.
              Allows secure authentication, but non-encrypted  data  transfers
              for  efficiency.   Fails the transfer if the server doesn't sup-
              port SSL/TLS.

              Added in 7.16.0.

       -G, --get
              When used, this option will make all  data  specified  with  -d,
              --data,  --data-binary or --data-urlencode to be used in an HTTP
              GET request instead of the POST request that otherwise would  be
              used. The data will be appended to the URL with a '?' separator.
              If  used  in combination with -I, --head, the POST data will in-
              stead be appended to the URL with a HEAD request.

              If this option is used several times,  only  the  first  one  is
              used.  This is because undoing a GET doesn't make sense, but you
              should then instead enforce the alternative method you prefer.

       -g, --globoff
              This option switches off the "URL globbing parser". When you set
              this  option, you can specify URLs that contain the letters {}[]
              without having them being interpreted by curl itself. Note  that
              these  letters are not normal legal URL contents but they should
              be encoded according to the URI standard.

       --happy-eyeballs-timeout-ms <milliseconds>
              Happy eyeballs is an algorithm that attempts to connect to  both
              IPv4  and  IPv6  addresses for dual-stack hosts, preferring IPv6
              first for the number of milliseconds. If the IPv6 address cannot
              be  connected  to  within that time then a connection attempt is
              made to the IPv4 address in parallel. The first connection to be
              established is the one that is used.

              The  range of suggested useful values is limited. Happy Eyeballs
              RFC 6555 says "It is RECOMMENDED  that  connection  attempts  be
              paced  150-250 ms apart to balance human factors against network
              load." libcurl currently defaults to 200 ms. Firefox and  Chrome
              currently default to 300 ms.

              If this option is used several times, the last one will be used.

              Added in 7.59.0.

       --haproxy-protocol
              (HTTP)  Send a HAProxy PROXY protocol v1 header at the beginning
              of the connection. This is used by some load balancers  and  re-
              verse proxies to indicate the client's true IP address and port.
              This  option is primarily useful when sending test requests to a
              service that expects this header.

              Added in 7.60.0.

       -I, --head
              (HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the
              command  HEAD which this uses to get nothing but the header of a
              document. When used on an FTP or FILE file,  curl  displays  the
              file size and last modification time only.

       -H, --header <header/@file>
              (HTTP)  Extra header to include in the request when sending HTTP
              to a server. You may specify any number of extra  headers.  Note
              that if you should add a custom header that has the same name as
              one of the internal ones curl would  use,  your  externally  set
              header will be used instead of the internal one. This allows you
              to make even trickier stuff than curl  would  normally  do.  You
              should  not  replace internally set headers without knowing per-
              fectly well what you're doing. Remove an internal header by giv-
              ing  a  replacement  without  content  on  the right side of the
              colon, as in: -H "Host:". If you send the custom header with no-
              value  then its header must be terminated with a semicolon, such
              as -H "X-Custom-Header;" to send "X-Custom-Header:".

              curl will make sure that each header  you  add/replace  is  sent
              with the proper end-of-line marker, you should thus not add that
              as a part of the header content: do not add newlines or carriage
              returns, they will only mess things up for you.

              Starting  in  7.55.0, this option can take an argument in @file-
              name style, which then adds a header for each line in the  input
              file. Using @- will make curl read the header file from stdin.

              See also the -A, --user-agent and -e, --referer options.

              Starting in 7.37.0, you need --proxy-header to send custom head-
              ers intended for a proxy.

              Example:

               curl -H "X-First-Name: Joe" http://example.com/

              WARNING: headers set with this option will be  set  in  all  re-
              quests  - even after redirects are followed, like when told with
              -L, --location. This can lead to the header being sent to  other
              hosts  than  the  original  host, so sensitive headers should be
              used with caution combined with following redirects.

              This option can be used  multiple  times  to  add/replace/remove
              multiple headers.

       -h, --help
              Usage  help.  This lists all current command line options with a
              short description.
       --hostpubmd5 <md5>
              (SFTP SCP) Pass a string containing 32 hexadecimal  digits.  The
              string  should  be the 128 bit MD5 checksum of the remote host's
              public key, curl will refuse the connection with the host unless
              the md5sums match.

              Added in 7.17.1.

       --http0.9
              (HTTP) Tells curl to be fine with HTTP version 0.9 response.

              HTTP/0.9  is  a completely headerless response and therefore you
              can also connect with this to non-HTTP servers and still  get  a
              response since curl will simply transparently downgrade - if al-
              lowed.

              A future curl version will deny continuing if the response isn't
              at least HTTP/1.0 unless this option is used.

       -0, --http1.0
              (HTTP)  Tells  curl to use HTTP version 1.0 instead of using its
              internally preferred HTTP version.

              This option overrides --http1.1 and --http2.

       --http1.1
              (HTTP) Tells curl to use HTTP version 1.1.

              This option  overrides  -0,  --http1.0  and  --http2.  Added  in
              7.33.0.

       --http2-prior-knowledge
              (HTTP)  Tells  curl  to  issue  its  non-TLS HTTP requests using
              HTTP/2 without HTTP/1.1 Upgrade.  It  requires  prior  knowledge
              that  the  server  supports HTTP/2 straight away. HTTPS requests
              will still do HTTP/2 the standard way with  negotiated  protocol
              version in the TLS handshake.

              --http2-prior-knowledge requires that the underlying libcurl was
              built to support HTTP/2. This option overrides --http1.1 and -0,
              --http1.0 and --http2. Added in 7.49.0.

       --http2
              (HTTP) Tells curl to use HTTP version 2.

              See also --no-alpn. --http2 requires that the underlying libcurl
              was built to support HTTP/2. This option overrides --http1.1 and
              -0, --http1.0 and --http2-prior-knowledge. Added in 7.33.0.

       --ignore-content-length
              (FTP  HTTP)  For HTTP, Ignore the Content-Length header. This is
              particularly useful for servers running Apache 1.x,  which  will
              report  incorrect  Content-Length  for files larger than 2 giga-
              bytes.

              For FTP (since 7.46.0), skip the RETR command to figure out  the
              size before downloading a file.

       -i, --include
              Include  the  HTTP  response headers in the output. The HTTP re-
              sponse headers can include things  like  server  name,  cookies,
              date of the document, HTTP version and more...

              To view the request headers, consider the -v, --verbose option.

              See also -v, --verbose.

       -k, --insecure
              (TLS) By default, every SSL connection curl makes is verified to
              be secure. This option allows curl to proceed and  operate  even
              for server connections otherwise considered insecure.
              The  server  connection  is verified by making sure the server's
              certificate contains the right name  and  verifies  successfully
              using the cert store.

              See this online resource for further details:
               https://curl.haxx.se/docs/sslcerts.html
              See also --proxy-insecure and --cacert.

       --interface <name>

              Perform  an operation using a specified interface. You can enter
              interface name, IP address or host name. An example  could  look
              like:

               curl --interface eth0:1 https://www.example.com/

              If this option is used several times, the last one will be used.
              On  Linux  it can be used to specify a VRF, but the binary needs
              to either have CAP_NET_RAW or to be run as root.  More  informa-
              tion   about  Linux  VRF:  https://www.kernel.org/doc/Documenta-
              tion/networking/vrf.txt

              See also --dns-interface.

       -4, --ipv4
              This option tells curl to resolve names to IPv4 addresses  only,
              and not for example try IPv6.

              See  also  --http1.1  and  --http2.  This  option  overrides -6,
              --ipv6.

       -6, --ipv6
              This option tells curl to resolve names to IPv6 addresses  only,
              and not for example try IPv4.

              See  also  --http1.1  and  --http2.  This  option  overrides -4,
              --ipv4.

       -j, --junk-session-cookies
              (HTTP) When curl is told to read cookies from a given file, this
              option will make it discard all "session cookies". This will ba-
              sically have the same effect as if a  new  session  is  started.
              Typical  browsers  always  discard  session cookies when they're
              closed down.

              See also -b, --cookie and -c, --cookie-jar.

       --keepalive-time <seconds>
              This option sets the time a connection needs to remain idle  be-
              fore  sending  keepalive  probes and the time between individual
              keepalive probes. It is currently effective on operating systems
              offering  the  TCP_KEEPIDLE  and  TCP_KEEPINTVL  socket  options
              (meaning Linux, recent AIX, HP-UX and more). This option has  no
              effect if --no-keepalive is used.

              If this option is used several times, the last one will be used.
              If unspecified, the option defaults to 60 seconds.

              Added in 7.18.0.

       --key-type <type>
              (TLS) Private key file type. Specify which type your --key  pro-
              vided  private  key  is. DER, PEM, and ENG are supported. If not
              specified, PEM is assumed.

              If this option is used several times, the last one will be used.

       --key <key>
              (TLS SSH) Private key file name. Allows you to provide your pri-
              vate  key in this separate file. For SSH, if not specified, curl
              tries the following candidates in order:

              If curl is built against OpenSSL library, and the engine  pkcs11
              is available, then a PKCS#11 URI (RFC 7512) can be used to spec-
              ify a private key located in a PKCS#11 device. A  string  begin-
              ning  with  "pkcs11:" will be interpreted as a PKCS#11 URI. If a
              PKCS#11 URI is provided, then the --engine option will be set as
              "pkcs11"  if none was provided and the --key-type option will be
              set as "ENG" if none was provided.

              If this option is used several times, the last one will be used.

       --krb <level>
              (FTP) Enable Kerberos authentication and use. The level must  be
              entered and should be one of 'clear', 'safe', 'confidential', or
              'private'. Should you use a level that  is  not  one  of  these,
              'private' will instead be used.

              If this option is used several times, the last one will be used.
              --krb  requires that the underlying libcurl was built to support
              Kerberos.

       --libcurl <file>
              Append this option to any ordinary curl command  line,  and  you
              will  get a libcurl-using C source code written to the file that
              does the equivalent of what your command-line operation does!

              If this option is used several times, the last given  file  name
              will be used.

              Added in 7.16.1.

       --limit-rate <speed>
              Specify  the  maximum  transfer  rate you want curl to use - for
              both downloads and uploads. This feature is useful if you have a
              limited pipe and you'd like your transfer not to use your entire
              bandwidth. To make it slower than it otherwise would be.

              The given speed is measured in bytes/second, unless a suffix  is
              appended.   Appending  'k' or 'K' will count the number as kilo-
              bytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes  it
              gigabytes. Examples: 200K, 3m and 1G.

              If  you  also use the -Y, --speed-limit option, that option will
              take precedence and might cripple the rate-limiting slightly, to
              help keeping the speed-limit logic working.

              If this option is used several times, the last one will be used.

       -l, --list-only
              (FTP  POP3)  (FTP)  When  listing  an FTP directory, this switch
              forces a name-only view. This is especially useful if  the  user
              wants  to  machine-parse  the contents of an FTP directory since
              the normal directory view doesn't use a standard look or format.
              When used like this, the option causes a NLST command to be sent
              to the server instead of LIST.

              Note: Some FTP servers list only  files  in  their  response  to
              NLST; they do not include sub-directories and symbolic links.

              (POP3)  When  retrieving a specific email from POP3, this switch
              forces a LIST command to be performed instead of RETR.  This  is
              particularly  useful if the user wants to see if a specific mes-
              sage id exists on the server and what size it is.

              Note: When combined with -X, --request, this option can be  used
              to send an UIDL command instead, so the user may use the email's
              unique identifier rather than it's message id to  make  the  re-
              quest.

              Added in 7.21.5.

       --local-port <num/range>
              Set  a  preferred single number or range (FROM-TO) of local port
              numbers to use for the connection(s).  Note that port numbers by
              nature  are a scarce resource that will be busy at times so set-
              ting this range to something too narrow might cause  unnecessary
              connection setup failures.

              Added in 7.15.2.

       --location-trusted
              (HTTP)  Like  -L,  --location, but will allow sending the name +
              password to all hosts that the site may redirect to. This may or
              may not introduce a security breach if the site redirects you to
              a site to which you'll send your authentication info  (which  is
              plaintext in the case of HTTP Basic authentication).

              See also -u, --user.

       -L, --location
              (HTTP)  If  the server reports that the requested page has moved
              to a different location (indicated with a Location: header and a
              3XX  response code), this option will make curl redo the request
              on the new place. If used together with  -i,  --include  or  -I,
              --head, headers from all requested pages will be shown. When au-
              thentication is used, curl only sends  its  credentials  to  the
              initial  host.  If a redirect takes curl to a different host, it
              won't be able to intercept the user+password. See  also  --loca-
              tion-trusted  on how to change this. You can limit the amount of
              redirects to follow by using the --max-redirs option.
              When curl follows a redirect and the request is not a plain  GET
              (for example POST or PUT), it will do the following request with
              a GET if the HTTP response was 301, 302, or 303. If the response
              code was any other 3xx code, curl will re-send the following re-
              quest using the same unmodified method.

              You can tell curl to not change the non-GET  request  method  to
              GET  after  a  30x  response  by using the dedicated options for
              that: --post301, --post302 and --post303.

       --login-options <options>
              (IMAP POP3 SMTP) Specify the login options to use during  server
              authentication.

              You  can  use the login options to specify protocol specific op-
              tions that may be used during authentication.  At  present  only
              IMAP,  POP3 and SMTP support login options. For more information
              about the login options please see RFC 2384, RFC 5092  and  IETF
              draft draft-earhart-url-smtp-00.txt

              If this option is used several times, the last one will be used.

              Added in 7.34.0.

       --mail-auth <address>
              (SMTP)  Specify  a  single address. This will be used to specify
              the authentication address (identity)  of  a  submitted  message
              that is being relayed to another server.

              See also --mail-rcpt and --mail-from. Added in 7.25.0.

       --mail-from <address>
              (SMTP)  Specify  a single address that the given mail should get
              sent from.

              See also --mail-rcpt and --mail-auth. Added in 7.20.0.

       --mail-rcpt <address>
              (SMTP) Specify a single address, user name or mailing list name.
              Repeat this option several times to send to multiple recipients.
              When  performing a mail transfer, the recipient should specify a
              valid email address to send the mail to.

              When performing an address verification (VRFY command), the  re-
              cipient  should  be  specified as the user name or user name and
              domain (as per Section 3.5 of RFC5321). (Added in 7.34.0)

              When performing a mailing list expand (EXPN command), the recip-
              ient  should  be  specified using the mailing list name, such as
              "Friends" or "London-Office".  (Added in 7.34.0)

              Added in 7.20.0.

       -M, --manual
              Manual. Display the huge help text.

       --max-filesize <bytes>
              Specify the maximum size (in bytes) of a file  to  download.  If
              the  file requested is larger than this value, the transfer will
              not start and curl will return with exit code 63.

              A size modifier may be used. For example, Appending 'k'  or  'K'
              will  count  the  number  as  kilobytes,  'm'  or  'M'  makes it
              megabytes, while 'g' or 'G' makes it gigabytes. Examples:  200K,
              3m and 1G. (Added in 7.58.0)

              NOTE:  The  file size is not always known prior to download, and
              for such files this option has no effect even if the file trans-
              fer  ends  up  being larger than this given limit. This concerns
              both FTP and HTTP transfers.

              See also --limit-rate.

       --max-redirs <num>
              (HTTP) Set maximum  number  of  redirection-followings  allowed.
              When  -L,  --location is used, is used to prevent curl from fol-
              lowing redirections too much. By default, the limit is set to 50
              redirections. Set this option to -1 to make it unlimited.

              If this option is used several times, the last one will be used.

       -m, --max-time <seconds>
              Maximum  time  in  seconds that you allow the whole operation to
              take.  This is useful for preventing your batch jobs from  hang-
              ing  for  hours due to slow networks or links going down.  Since
              7.32.0, this option accepts decimal values, but the actual time-
              out will decrease in accuracy as the specified timeout increases
              in decimal precision.

              If this option is used several times, the last one will be used.

              See also --connect-timeout.

       --metalink
              This option can tell curl to parse and process a  given  URI  as
              Metalink  file  (both  version 3 and 4 (RFC 5854) are supported)
              and make use of the mirrors listed within for failover if  there
              are  errors (such as the file or server not being available). It
              will also verify the hash of the file after  the  download  com-
              pletes.  The Metalink file itself is downloaded and processed in
              memory and not stored in the local file system.

              Example to use a remote Metalink file:

               curl --metalink http://www.example.com/example.metalink

              To use a Metalink file in the local file system, use FILE proto-
              col (file://):

               curl --metalink file://example.metalink

              Please  note  that if FILE protocol is disabled, there is no way
              to use a local Metalink file at the time of this  writing.  Also
              note  that  if  --metalink  and -i, --include are used together,
              --include will be ignored. This is because including headers  in
              the  response  will break Metalink parser and if the headers are
              included in the file described in Metalink file, hash check will
              fail.

              --metalink  requires  that  the  underlying libcurl was built to
              support metalink. Added in 7.27.0.

       --negotiate
              (HTTP) Enables Negotiate (SPNEGO) authentication.

              This option requires a library built with GSS-API or  SSPI  sup-
              port.  Use  -V,  --version  to  see  if  your curl supports GSS-
              API/SSPI or SPNEGO.

              When using this option, you must also provide a fake -u,  --user
              option  to  activate the authentication code properly. Sending a
              '-u :' is enough as the user name  and  password  from  the  -u,
              --user option aren't actually used.

              If  this  option  is  used  several times, only the first one is
              used.

              See also --basic and --ntlm and --anyauth and --proxy-negotiate.

       --netrc-file <filename>
              This option is similar to -n, --netrc, except that  you  provide
              the  path  (absolute  or  relative)  to the netrc file that curl
              should use.  You can only specify one netrc file per invocation.
              If  several --netrc-file options are provided, the last one will
              be used.

              It will abide by --netrc-optional if specified.

              This option overrides -n, --netrc. Added in 7.21.5.

       --netrc-optional
              Very similar to -n, --netrc, but this option  makes  the  .netrc
              usage optional and not mandatory as the -n, --netrc option does.

              See also --netrc-file. This option overrides -n, --netrc.

       -n, --netrc
              Makes  curl  scan  the  .netrc  (_netrc  on Windows) file in the
              user's home directory for login name and password. This is typi-
              cally  used for FTP on Unix. If used with HTTP, curl will enable
              user authentication. See netrc(5) ftp(1) for details on the file
              format.  Curl  will  not  complain if that file doesn't have the
              right permissions (it should not be either world- or group-read-
              able).  The environment variable "HOME" is used to find the home
              directory.

              A quick and very simple example of how to setup a .netrc to  al-
              low  curl  to  FTP to the machine host.domain.com with user name
              'myself' and password 'secret' should look similar to:

              machine host.domain.com login myself password secret

       -:, --next
              Tells curl to use a separate operation for the following URL and
              associated  options.  This  allows  you  to send several URL re-
              quests, each with their own specific options, for example,  such
              as different user names or custom requests for each.

              -:,  --next  will  reset  all local options and only global ones
              will have their values survive over to the  operation  following
              the  -:,  --next  instruction. Global options include -v, --ver-
              bose, --trace, --trace-ascii and --fail-early.

              For example, you can do both a GET and a POST in a  single  com-
              mand line:

               curl www1.example.com --next -d postthis www2.example.com

              Added in 7.36.0.

       --no-alpn
              (HTTPS)  Disable  the ALPN TLS extension. ALPN is enabled by de-
              fault if libcurl was built with an  SSL  library  that  supports
              ALPN.  ALPN is used by a libcurl that supports HTTP/2 to negoti-
              ate HTTP/2 support with the server during https sessions.

              See also --no-npn and --http2. --no-alpn requires that  the  un-
              derlying libcurl was built to support TLS. Added in 7.36.0.

       -N, --no-buffer
              Disables the buffering of the output stream. In normal work sit-
              uations, curl will use a standard buffered  output  stream  that
              will have the effect that it will output the data in chunks, not
              necessarily exactly when the data arrives.   Using  this  option
              will disable that buffering.

              Note  that  this  is the negated option name documented. You can
              thus use --buffer to enforce the buffering.

       --no-keepalive
              Disables the use of keepalive messages on  the  TCP  connection.
              curl otherwise enables them by default.

              Note  that  this  is the negated option name documented. You can
              thus use --keepalive to enforce keepalive.

       --no-npn
              (HTTPS) Disable the NPN TLS extension. NPN is enabled by default
              if  libcurl was built with an SSL library that supports NPN. NPN
              is used by a libcurl that supports HTTP/2  to  negotiate  HTTP/2
              support with the server during https sessions.

              See  also  --no-alpn and --http2. --no-npn requires that the un-
              derlying libcurl was built to support TLS. Added in 7.36.0.

       --no-sessionid
              (TLS) Disable curl's use of SSL session-ID caching.  By  default
              all  transfers are done using the cache. Note that while nothing
              should ever get hurt by attempting  to  reuse  SSL  session-IDs,
              there seem to be broken SSL implementations in the wild that may
              require you to disable this in order for you to succeed.

              Note that this is the negated option name  documented.  You  can
              thus use --sessionid to enforce session-ID caching.

              Added in 7.16.0.

       --noproxy <no-proxy-list>
              Comma-separated  list  of hosts which do not use a proxy, if one
              is specified.  The only wildcard is a single * character,  which
              matches all hosts, and effectively disables the proxy. Each name
              in this list is matched as either a domain  which  contains  the
              hostname,  or  the hostname itself. For example, local.com would
              match  local.com,  local.com:80,  and  www.local.com,  but   not
              www.notlocal.com.

              Since  7.53.0,  This  option overrides the environment variables
              that disable the proxy. If there's an environment variable  dis-
              abling a proxy, you can set noproxy list to "" to override it.

              Added in 7.19.4.

       --ntlm-wb
              (HTTP) Enables NTLM much in the style --ntlm does, but hand over
              the authentication to the separate binary  ntlmauth  application
              that is executed when needed.

              See also --ntlm and --proxy-ntlm.

       --ntlm (HTTP)  Enables  NTLM  authentication.  The  NTLM authentication
              method was designed by Microsoft and is used by IIS web servers.
              It  is a proprietary protocol, reverse-engineered by clever peo-
              ple and implemented in curl based on their efforts. This kind of
              behavior  should  not be endorsed, you should encourage everyone
              who uses NTLM to switch to a public and  documented  authentica-
              tion method instead, such as Digest.

              If  you  want to enable NTLM for your proxy authentication, then
              use --proxy-ntlm.

              If this option is used several times,  only  the  first  one  is
              used.

              See  also  --proxy-ntlm.  --ntlm  requires  that  the underlying
              libcurl was built to support TLS. This option overrides  --basic
              and --negotiate and --digest and --anyauth.

       --oauth2-bearer <token>
              (IMAP  POP3  SMTP) Specify the Bearer Token for OAUTH 2.0 server
              authentication. The Bearer Token is used in conjunction with the
              user  name  which  can  be specified as part of the --url or -u,
              --user options.

              The Bearer Token and user name are formatted  according  to  RFC
              6750.

              If this option is used several times, the last one will be used.

       -o, --output <file>
              Write output to <file> instead of stdout. If you are using {} or
              [] to fetch multiple documents, you can use '#'  followed  by  a
              number  in  the <file> specifier. That variable will be replaced
              with the current string for the URL being fetched. Like in:

               curl http://{one,two}.example.com -o "file_#1.txt"

              or use several variables like:

               curl http://{site,host}.host[1-5].com -o "#1_#2"

              You may use this option as many times as the number of URLs  you
              have.  For  example, if you specify two URLs on the same command
              line, you can use it like this:

                curl -o aa example.com -o bb example.net

              and the order of the -o options and  the  URLs  doesn't  matter,
              just  that  the  first -o is for the first URL and so on, so the
              above command line can also be written as

                curl example.com example.net -o aa -o bb

              See also the --create-dirs option to create the  local  directo-
              ries  dynamically.  Specifying the output as '-' (a single dash)
              will force the output to be done to stdout.

              See also -O, --remote-name and --remote-name-all and  -J,  --re-
              mote-header-name.

       --pass <phrase>
              (SSH TLS) Passphrase for the private key

              If this option is used several times, the last one will be used.

       --path-as-is
              Tell  curl  to  not handle sequences of /../ or /./ in the given
              URL path. Normally curl will squash or merge them  according  to
              standards but with this option set you tell it not to do that.

              Added in 7.42.0.

       --pinnedpubkey <hashes>
              (TLS)  Tells  curl  to  use  the  specified  public key file (or
              hashes) to verify the peer. This can be a path to a  file  which
              contains a single public key in PEM or DER format, or any number
              of base64 encoded sha256 hashes preceded by 'sha256//' and sepa-
              rated by ';'

              When  negotiating  a  TLS  or SSL connection, the server sends a
              certificate indicating its identity. A public key  is  extracted
              from  this certificate and if it does not exactly match the pub-
              lic key provided to this option, curl will abort the  connection
              before sending or receiving any data.

              PEM/DER support:
                7.39.0: OpenSSL, GnuTLS and GSKit
                7.43.0: NSS and wolfSSL/CyaSSL
                7.47.0: mbedtls
                7.49.0: PolarSSL sha256 support:
                7.44.0: OpenSSL, GnuTLS, NSS and wolfSSL/CyaSSL.
                7.47.0: mbedtls
                7.49.0: PolarSSL Other SSL backends not supported.

              If this option is used several times, the last one will be used.

       --post301
              (HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST
              requests into GET requests when following a 301 redirection. The
              non-RFC  behaviour  is  ubiquitous in web browsers, so curl does
              the conversion by default to maintain  consistency.  However,  a
              server  may  require  a POST to remain a POST after such a redi-
              rection. This option is meaningful only when using  -L,  --loca-
              tion.

              See  also  --post302  and --post303 and -L, --location. Added in
              7.17.1.

       --post302
              (HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST
              requests into GET requests when following a 302 redirection. The
              non-RFC behaviour is ubiquitous in web browsers,  so  curl  does
              the  conversion  by  default to maintain consistency. However, a
              server may require a POST to remain a POST after  such  a  redi-
              rection.  This  option is meaningful only when using -L, --loca-
              tion.

              See also --post301 and --post303 and -L,  --location.  Added  in
              7.19.1.

       --post303
              (HTTP) Tells curl to violate RFC 7231/6.4.4 and not convert POST
              requests into GET requests when following  303  redirections.  A
              server may require a POST to remain a POST after a 303 redirect-
              ion. This option is meaningful only when using -L, --location.

              See also --post302 and --post301 and -L,  --location.  Added  in
              7.26.0.

       --preproxy [protocol://]host[:port]
              Use  the  specified  SOCKS proxy before connecting to an HTTP or
              HTTPS -x, --proxy. In such a case curl  first  connects  to  the
              SOCKS  proxy  and  then  connects (through SOCKS) to the HTTP or
              HTTPS proxy. Hence pre proxy.

              The pre proxy string should be specified with a protocol:// pre-
              fix  to  specify  alternative  proxy  protocols.  Use socks4://,
              socks4a://, socks5:// or  socks5h://  to  request  the  specific
              SOCKS  version  to be used. No protocol specified will make curl
              default to SOCKS4.

              If the port number is not specified in the proxy string,  it  is
              assumed to be 1080.

              User and password that might be provided in the proxy string are
              URL decoded by curl. This allows you to pass in special  charac-
              ters such as @ by using %40 or pass in a colon with %3a.

              If this option is used several times, the last one will be used.

              Added in 7.52.0.

       -#, --progress-bar
              Make curl display transfer progress as a simple progress bar in-
              stead of the standard, more informational, meter.

              This progress bar draws a single line of '#'  characters  across
              the screen and shows a percentage if the transfer size is known.
              For transfers without a known size, there  will  be  space  ship
              (-=o=-)  that  moves back and forth but only while data is being
              transferred, with a set of flying hash sign symbols on top.

       --proto-default <protocol>
              Tells curl to use protocol for any URL missing a scheme name.

              Example:

               curl --proto-default https ftp.mozilla.org

              An unknown or unsupported  protocol  causes  error  CURLE_UNSUP-
              PORTED_PROTOCOL (1).

              This option does not change the default proxy protocol (http).

              Without  this  option curl would make a guess based on the host,
              see --url for details.

              Added in 7.45.0.

       --proto-redir <protocols>
              Tells curl to limit what protocols it may use on redirect.  Pro-
              tocols  denied by --proto are not overridden by this option. See
              --proto for how protocols are represented.

              Example, allow only HTTP and HTTPS on redirect:

               curl --proto-redir -all,http,https http://example.com

              By default curl will allow all protocols on redirect except sev-
              eral  disabled  for  security reasons: Since 7.19.4 FILE and SCP
              are disabled, and since 7.40.0 SMB and SMBS are  also  disabled.
              Specifying  all  or  +all enables all protocols on redirect, in-
              cluding those disabled for security.

              Added in 7.20.2.

       --proto <protocols>
              Tells curl to limit what protocols it may use in  the  transfer.
              Protocols  are evaluated left to right, are comma separated, and
              are each a protocol name or

              +  Permit this protocol in addition to protocols already permit-
                 ted (this is the default if no modifier is used).

              -  Deny  this  protocol,  removing it from the list of protocols
                 already permitted.

              =  Permit only this protocol (ignoring the list already  permit-
                 ted),  though subject to later modification by subsequent en-
                 tries in the comma separated list.

              For example:

              --proto -ftps  uses the default protocols, but disables ftps

              --proto -all,https,+http
                             only enables http and https

              --proto =http,https
                             also only enables http and https

       Unknown protocols produce a warning. This allows scripts to safely rely
       on being able to disable potentially dangerous protocols, without rely-
       ing upon support for that protocol being built into curl  to  avoid  an
       error.

       This option can be used multiple times, in which case the effect is the
       same as concatenating the protocols into one instance of the option.

       See also --proto-redir and --proto-default. Added in 7.20.2.
       --proxy-anyauth
              Tells curl to pick a suitable authentication method when  commu-
              nicating  with  the  given HTTP proxy. This might cause an extra
              request/response round-trip.

              See also -x, --proxy and --proxy-basic and --proxy-digest. Added
              in 7.13.2.

       --proxy-basic
              Tells  curl  to use HTTP Basic authentication when communicating
              with the given proxy. Use --basic for enabling HTTP Basic with a
              remote  host.  Basic  is  the default authentication method curl
              uses with proxies.

              See also -x, --proxy and --proxy-anyauth and --proxy-digest.

       --proxy-cacert <file>
              Same as --cacert but used in HTTPS proxy context.

              See also  --proxy-capath  and  --cacert  and  --capath  and  -x,
              --proxy. Added in 7.52.0.

       --proxy-capath <dir>
              Same as --capath but used in HTTPS proxy context.

              See  also  --proxy-cacert and -x, --proxy and --capath. Added in
              7.52.0.

       --proxy-cert-type <type>
              Same as --cert-type but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-cert <cert[:passwd]>
              Same as -E, --cert but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-ciphers <list>
              Same as --ciphers but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-crlfile <file>
              Same as --crlfile but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-digest
              Tells curl to use HTTP Digest authentication when  communicating
              with the given proxy. Use --digest for enabling HTTP Digest with
              a remote host.

              See also -x, --proxy and --proxy-anyauth and --proxy-basic.

       --proxy-header <header/@file>
              (HTTP) Extra header to include in the request when sending  HTTP
              to a proxy. You may specify any number of extra headers. This is
              the equivalent option to -H, --header but is for proxy  communi-
              cation  only  like  in CONNECT requests when you want a separate
              header sent to the proxy to what is sent to  the  actual  remote
              host.

              curl  will  make  sure  that each header you add/replace is sent
              with the proper end-of-line marker, you should thus not add that
              as a part of the header content: do not add newlines or carriage
              returns, they will only mess things up for you.

              Headers specified with this option will not be included  in  re-
              quests that curl knows will not be sent to a proxy.

              Starting  in  7.55.0, this option can take an argument in @file-
              name style, which then adds a header for each line in the  input
              file. Using @- will make curl read the header file from stdin.

              This  option  can  be  used multiple times to add/replace/remove
              multiple headers.

              Added in 7.37.0.
       --proxy-insecure
              Same as -k, --insecure but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-key-type <type>
              Same as --key-type but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-key <key>
              Same as --key but used in HTTPS proxy context.

       --proxy-negotiate
              Tells curl to use HTTP Negotiate  (SPNEGO)  authentication  when
              communicating with the given proxy. Use --negotiate for enabling
              HTTP Negotiate (SPNEGO) with a remote host.

              See also --proxy-anyauth and --proxy-basic. Added in 7.17.1.

       --proxy-ntlm
              Tells curl to use HTTP NTLM  authentication  when  communicating
              with the given proxy. Use --ntlm for enabling NTLM with a remote
              host.

              See also --proxy-negotiate and --proxy-anyauth.

       --proxy-pass <phrase>
              Same as --pass but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-pinnedpubkey <hashes>
              (TLS) Tells curl to  use  the  specified  public  key  file  (or
              hashes)  to verify the proxy. This can be a path to a file which
              contains a single public key in PEM or DER format, or any number
              of base64 encoded sha256 hashes preceded by 'sha256//' and sepa-
              rated by ';'

              When negotiating a TLS or SSL connection,  the  server  sends  a
              certificate  indicating  its identity. A public key is extracted
              from this certificate and if it does not exactly match the  pub-
              lic  key provided to this option, curl will abort the connection
              before sending or receiving any data.

              If this option is used several times, the last one will be used.

       --proxy-service-name <name>
              This option allows you to change the service name for proxy  ne-
              gotiation.

              Added in 7.43.0.

       --proxy-ssl-allow-beast
              Same as --ssl-allow-beast but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tls13-ciphers <ciphersuite list>
              (TLS)  Specifies which cipher suites to use in the connection to
              your HTTPS proxy when it negotiates TLS 1.3. The list of ciphers
              suites  must  specify  valid  ciphers. Read up on TLS 1.3 cipher
              suite details on this URL:

               https://curl.haxx.se/docs/ssl-ciphers.html

              If this option is used several times, the last one will be used.

       --proxy-tlsauthtype <type>
              Same as --tlsauthtype but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlspassword <string>
              Same as --tlspassword but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsuser <name>
              Same as --tlsuser but used in HTTPS proxy context.

              Added in 7.52.0.

       --proxy-tlsv1
              Same as -1, --tlsv1 but used in HTTPS proxy context.

              Added in 7.52.0.

       -U, --proxy-user <user:password>
              Specify the user name and password to use for proxy  authentica-
              tion.

              If  you use a Windows SSPI-enabled curl binary and do either Ne-
              gotiate or NTLM authentication then you can tell curl to  select
              the user name and password from your environment by specifying a
              single colon with this option: "-U :".

              On systems where it works, curl will hide the given option argu-
              ment  from  process listings. This is not enough to protect cre-
              dentials from possibly getting seen by other users on  the  same
              system  as  they will still be visible for a brief moment before
              cleared. Such sensitive data should be retrieved from a file in-
              stead or similar and never used in clear text in a command line.
              If this option is used several times, the last one will be used.

       -x, --proxy [protocol://]host[:port]
              Use the specified proxy.

              The  proxy string can be specified with a protocol:// prefix. No
              protocol specified or http:// will be treated as HTTP proxy. Use
              socks4://, socks4a://, socks5:// or socks5h:// to request a spe-
              cific SOCKS version to be used.  (The protocol support was added
              in curl 7.21.7)

              HTTPS  proxy  support  via https:// protocol prefix was added in
              7.52.0 for OpenSSL, GnuTLS and NSS.

              Unrecognized and unsupported  proxy  protocols  cause  an  error
              since  7.52.0.   Prior  versions may ignore the protocol and use
              http:// instead.

              If the port number is not specified in the proxy string,  it  is
              assumed to be 1080.

              This  option  overrides  existing environment variables that set
              the proxy to use. If there's an environment variable  setting  a
              proxy, you can set proxy to "" to override it.

              All operations that are performed over an HTTP proxy will trans-
              parently be converted to HTTP. It means  that  certain  protocol
              specific operations might not be available. This is not the case
              if you can tunnel through the proxy, as one with the -p, --prox-
              ytunnel option.

              User and password that might be provided in the proxy string are
              URL decoded by curl. This allows you to pass in special  charac-
              ters such as @ by using %40 or pass in a colon with %3a.

              The  proxy host can be specified the exact same way as the proxy
              environment variables, including the protocol  prefix  (http://)
              and the embedded user + password.

              If this option is used several times, the last one will be used.

       --proxy1.0 <host[:port]>
              Use  the  specified  HTTP  1.0  proxy. If the port number is not
              specified, it is assumed at port 1080.

              The only difference between this and the HTTP proxy  option  -x,
              --proxy,  is that attempts to use CONNECT through the proxy will
              specify an HTTP 1.0 protocol instead of the default HTTP 1.1.

       -p, --proxytunnel
              When an HTTP proxy is used -x, --proxy, this  option  will  make
              curl  tunnel through the proxy. The tunnel approach is made with
              the HTTP proxy CONNECT request and requires that the  proxy  al-
              lows direct connect to the remote port number curl wants to tun-
              nel through to.

              To suppress proxy CONNECT response headers when curl is  set  to
              output headers use --suppress-connect-headers.

              See also -x, --proxy.

       --pubkey <key>
              (SFTP SCP) Public key file name. Allows you to provide your pub-
              lic key in this separate file.

              If this option is used several times, the last one will be used.
              (As of 7.39.0, curl attempts to automatically extract the public
              key  from the private key file, so passing this option is gener-
              ally not required. Note that this public key extraction requires
              libcurl  to  be linked against a copy of libssh2 1.2.8 or higher
              that is itself linked against OpenSSL.)

       -Q, --quote
              (FTP SFTP) Send an arbitrary command to the remote FTP  or  SFTP
              server.  Quote commands are sent BEFORE the transfer takes place
              (just after the initial PWD command in an FTP  transfer,  to  be
              exact). To make commands take place after a successful transfer,
              prefix them with a dash '-'.  To make  commands  be  sent  after
              curl has changed the working directory, just before the transfer
              command(s), prefix the command with a '+'  (this  is  only  sup-
              ported for FTP). You may specify any number of commands.

              If  the  server returns failure for one of the commands, the en-
              tire operation will be aborted. You must send syntactically cor-
              rect  FTP  commands as RFC 959 defines to FTP servers, or one of
              the commands listed below to SFTP servers.

              This option can be used multiple times. When speaking to an  FTP
              server,  prefix  the  command  with an asterisk (*) to make curl
              continue even if the command fails as by default curl will  stop
              at first failure.

              SFTP  is a binary protocol. Unlike for FTP, curl interprets SFTP
              quote commands itself before sending them to the  server.   File
              names may be quoted shell-style to embed spaces or special char-
              acters.  Following is the list of all supported SFTP quote  com-
              mands:

              chgrp group file
                     The  chgrp command sets the group ID of the file named by
                     the file operand to the group ID specified by  the  group
                     operand. The group operand is a decimal integer group ID.

              chmod mode file
                     The  chmod  command  modifies  the  file mode bits of the